{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/xiaolanchong.jpeg","path":"images/xiaolanchong.jpeg","modified":1,"renderable":0},{"_id":"source/images/什么是双向数据绑定.png","path":"images/什么是双向数据绑定.png","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Diff算法.md","hash":"ea12564bf3f7a668891e5529706176dfebda11f2","modified":1680929072782},{"_id":"source/_posts/Vue组件间的通讯方式.md","hash":"7c964fa262276385f344976280d13457920af0cf","modified":1680946435971},{"_id":"source/_posts/Vue的一些面试题.md","hash":"1484ec43d61681560d51813b20266e587aaee6b3","modified":1680949357464},{"_id":"source/_posts/hello-world.md","hash":"b7e49f893fbe0250748d4526d9729c9fbc1ecf36","modified":1680924243500},{"_id":"source/_posts/什么是双向数据绑定.md","hash":"19dfddf7e484df8a1fd13c21703a5bc546bd3eb1","modified":1680929081775},{"_id":"source/_posts/computed和watch的区别.md","hash":"5205ac2fd8d5bda8232e8a4f5f0fb7c55551c393","modified":1680948999602},{"_id":"source/_posts/浏览器都做了什么.md","hash":"10510dea1e34c8e500d54099a43a5a60e61ad80a","modified":1680949700843},{"_id":"source/_posts/高阶函数.md","hash":"49c0679fa0f8c8f78dcaf48888cb1d9cf79bfa4f","modified":1680951605588},{"_id":"source/about/index-1.md","hash":"bddde033f03d1861395b3d7ad76a6235c0a4c5c8","modified":1680919992418},{"_id":"source/about/index.md","hash":"1f7e14061908397afda04f9b7876773d9dc34fc5","modified":1680919911886},{"_id":"source/.DS_Store","hash":"e61d465316cac8db3506e4fc170f1dd76920088e","modified":1680918888491},{"_id":"source/images/xiaolanchong.jpeg","hash":"c351e8e5436b944e572eaffba90bd128350fe757","modified":1612503483553},{"_id":"source/images/什么是双向数据绑定.png","hash":"d6191e122ae851b9cea0d50b9d9f4efc635a6a71","modified":0},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1680920486201},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"088788e149051fc0a3c6096ba95e35a8344de04b","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"30e3f4ccfef8474c05cf0b1eb02e91bd0a152807","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1680923274726},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1680923274726},{"_id":"public/local-search.xml","hash":"0851b2379e4078044c259777702eb04d210d4023","modified":1680951744704},{"_id":"public/about/index-1.html","hash":"4145a60f2fd33c79d3ec03bd9036a5aaefd5914f","modified":1680951744704},{"_id":"public/about/index.html","hash":"784865019008ef5ca2361ab67fe6d939790cd4bc","modified":1680951744704},{"_id":"public/archives/index.html","hash":"3c61cbce2d81f95264d95c2905fc0c7579d5ad50","modified":1680951744704},{"_id":"public/archives/2023/index.html","hash":"eb556e4a78cd03816b6bc04fd6b497e0a56e5a97","modified":1680951744704},{"_id":"public/archives/2023/04/index.html","hash":"189c4d1b5c307d4f289a5d0a74261c99766ff4a4","modified":1680951744704},{"_id":"public/categories/面试题/index.html","hash":"7f044db25455e41cd30eba4fe19e2142903a7ee0","modified":1680951744704},{"_id":"public/categories/高阶函数/index.html","hash":"023118ca3474cbdb43385bc0ba9017555139875a","modified":1680951744704},{"_id":"public/tags/Vue/index.html","hash":"86878691ebd18e4531ee0d9fa16817035ce3d55c","modified":1680951744704},{"_id":"public/tags/Diff/index.html","hash":"68d2db6b019117a7d48038ef3edb7029b0492d8b","modified":1680951744704},{"_id":"public/tags/HTTP/index.html","hash":"ac0d451f5eb954afff59f51a7de5706eaca2799b","modified":1680951744704},{"_id":"public/tags/函数组合/index.html","hash":"267ad2b7e6e3d7098f1a357fe4fcfd4f1efec013","modified":1680951744704},{"_id":"public/tags/柯里化函数/index.html","hash":"6c2993182a6236de0b297bc85fceee494cd8ca11","modified":1680951744704},{"_id":"public/tags/偏函数/index.html","hash":"a34b129e3c09dd35f6b8b11653423a861aed6ccf","modified":1680951744704},{"_id":"public/tags/惰性函数/index.html","hash":"7a2b7ba88994777a43e76e227a9f1a29ecb8c0bf","modified":1680951744704},{"_id":"public/tags/缓存函数/index.html","hash":"93bd2609714e769f725c589b8118f05d9fe8aa08","modified":1680951744704},{"_id":"public/404.html","hash":"414437a9ec4df80848b0df2cd17d475b3e76d05f","modified":1680951744704},{"_id":"public/tags/index.html","hash":"0bdea52356be72261e05307bc863621024d6c340","modified":1680951744704},{"_id":"public/categories/index.html","hash":"d8ece291eaa3996ca2885b9e8f2d64b96fc74df2","modified":1680951744704},{"_id":"public/links/index.html","hash":"c594e1a7015cf39e6963e7488fb99d7c6e6d79c9","modified":1680951744704},{"_id":"public/2023/04/08/高阶函数/index.html","hash":"d487e3e115d8cabe02a2bb3bfa38f00fc2bf26b6","modified":1680951744704},{"_id":"public/2023/04/08/浏览器都做了什么/index.html","hash":"aed4acf17d9ae500fa17098809b24ecbbfea65be","modified":1680951744704},{"_id":"public/2023/04/08/computed和watch的区别/index.html","hash":"a4cc9ddf77c6bee52462d99ce744faa1ddd1ee0f","modified":1680951744704},{"_id":"public/2023/04/08/Vue的一些面试题/index.html","hash":"788dea4883b026431c976cf8e5b7eaf7ae947d75","modified":1680951744704},{"_id":"public/2023/04/07/Diff算法/index.html","hash":"457cf9e6c0c5a55cf1381c2ea5c1aca459205727","modified":1680951744704},{"_id":"public/2023/04/07/什么是双向数据绑定/index.html","hash":"c8cc8edc1b02d1875af6473ac5106d6be12ad12b","modified":1680951744704},{"_id":"public/2023/01/01/hello-world/index.html","hash":"43b7427f898f66b2ed936fd78eb83e103aafd9de","modified":1680951744704},{"_id":"public/./index.html","hash":"403a20ee7c1046399582141d7aaf3e063fc3f4b7","modified":1680951744704},{"_id":"public/2023/04/08/Vue组件间的通讯方式/index.html","hash":"49225d78f54402eab06e4a4f9b4bab9b20019f4f","modified":1680951744704},{"_id":"public/images/xiaolanchong.jpeg","hash":"c351e8e5436b944e572eaffba90bd128350fe757","modified":1680951744704},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1680951744704},{"_id":"public/images/什么是双向数据绑定.png","hash":"d6191e122ae851b9cea0d50b9d9f4efc635a6a71","modified":1680951744704},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1680951744704},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1680951744704},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1680951744704},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1680951744704},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1680951744704},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1680951744704},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1680951744704},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1680951744704},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1680951744704},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1680951744704},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1680951744704},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1680951744704},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1680951744704},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1680951744704},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1680951744704},{"_id":"public/css/main.css","hash":"4d4a763ef5e9ab2602c46e812d846bba7a277757","modified":1680951744704},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1680951744704}],"Category":[{"name":"面试题","_id":"clg7v9ng50004tfxcbva35e6p"},{"name":"高阶函数","_id":"clg7v9ngm000ttfxc9i8e3yd8"}],"Data":[],"Page":[{"title":"about","date":"2023-04-08T02:13:12.000Z","_content":"","source":"about/index-1.md","raw":"---\ntitle: about\ndate: 2023-04-08 10:13:12\n---\n","updated":"2023-04-08T02:13:12.418Z","path":"about/index-1.html","comments":1,"layout":"page","_id":"clg7v9nfv0000tfxccgii0fcr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2023-04-08T02:11:51.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-04-08 10:11:51\n---\n","updated":"2023-04-08T02:11:51.886Z","path":"about/index.html","comments":1,"layout":"page","_id":"clg7v9ng30002tfxc3wjx8m8z","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Vue的一些面试题","date":"2023-04-08T08:03:29.000Z","_content":"\n# Vue 的生命周期\n\n> 老常规第一问\n\n- Vue2：beforeCreate => created => beforeMount => mounted => beforeUpdate => updated => beforeDestroy => destroyed\n- Vue3：setup => onBeforeMount => onMount => onBeforeUpdate => onUpdated => onBeforeUnmount => onUnmounted\n\n> keep-alive\n\n- Vue2：activated 、deactivated\n- Vue3：onActivated 、onDeactivated\n\n> 捕获一个来自子孙组件的异常\n\n- vue2：errorCaptured\n- vue3：onErrorCaptured\n\n# 父子生命周期的顺序\n\n子组件先挂载，然后父组件，更新也类似\n\n# v-model 原理\n\nv-model 是 vue 的语法糖\n\ninput[text/number/password]、textarea 元素使用的 value 属性和 input 事件\n\ninput[checkbox/radio]元素使用的 checked 属性和 change 事件\n\nselect 元素将 value 作为 prop 并将 change 作为事件\n\n# 为什么 data 是个函数\n\n因为组件会被复用需要保证唯一性\n\n# Keep-alive 的了解\n\nkeep-alive 是 vue 内部的组件 可以使被包含的组件保留状态，避免重新渲染\n\n1.  一般结合路由和动态组件一起使用，用于缓存组件\n2.  提供的 include 和 exclude 属性\n    - include => 只有匹配的会缓存\n    - exclude => 匹配的不会缓存 优先级比 include 高\n3.  对象两个特殊钩子函数 activated 和 deactivated\n\n# computed 和 watch 的区别和运用场景\n\n- computed:计算属性,有缓存,当我们需要进行数值计算，并且依赖于其他数据时使用\n- watch:监听,当我们需要异步或开销较大的操作时使用,可以根据需要限制我们操作的频次\n\n{% post_link computed和watch的区别 %}\n\n# 聊聊 nextTick\n\n1. 把回调函数放入 callbacks 等待执行\n2. 将执行函数放入微任务或宏任务中\n   > 为什么是微任务或宏任务？\n   > 对当前环境进行了降级处理 Promise => MutationObserver => setImmediate => setTimeout (1、2 微任务 3、4 宏任务)\n3. 事件循环到微任务或宏任务，执行函数依次执行 callbacks 中的回调\n\n# render\n\n> 为什么使用 render 函数？\n\nVUE 推荐在绝大多数情况下使用 template 来创建我们的 HTML。然而在一些场景中，我们真的需要 JavaScript 的完全编程的能力，这就是 render 函数，它比 template 更接近编译器。（这是官方的话）\n简单来说，我们为什么要使用 render 函数呢？？ 便是因为我们最经常使用的一个引入。\n\n> render 函数的解析\n\nrender 函数即渲染函数，它是个函数，它的参数 createElement 也是个函数。\n\ncreateElement 有三个参数\n\n1. 一个 HTML 标签字符串 必选\n2. 一个包含模板相关属性的数据对象 可选\n3. 子虚拟节点 可选\n\n[查看原文](https://blog.csdn.net/m0_59722204/article/details/126907040)\n\n# v-show 与 v-if 的区别\n\n- v-if 是条件渲染 确保在切换过程中条件块内的事件监听器和子组件适当地被销毁重建\n- v-show 元素总会被渲染，且只是简单地基于 display 属性进行切换\n\n# Class 与 Style 如何动态绑定\n\n- 对象语法\n- 数组语法\n\n# vue-router 路由模式有几种\n\n1. hash location.hash 向服务端发出请求是 hash 部分不会被发送\n2. history HTML5 提供了 History API 来实现 URL 的变化\n   - history.pushState()\n   - history.repalceState()\n3. abstract 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.\n\n# SPA 单页的理解 优缺点\n\n- SPA 仅在页面初始化时加载相应的 html、js、css 等\n- SPA 不会因为用户的操作而进行页面的重新加载和跳转；取而代之的是利用路由机制实现页面内容的变化\n\n> 优点：\n\n1. 用户体验好、快、内容的改变不需重新加载整个页面，避免不必要的跳转和重新渲染\n2. SPA 相对服务器压力小；\n3. 前后端分离，架构清晰，前端负责交互逻辑，后端提供相应的数据接口；\n\n> 缺点：\n\n1. 首屏加载等待问题；\n2. SEO 难度大\n\n> SPA\n\n1. CSR 客户端渲染=>当前主流模式\n2. SSR 服务端渲染=>能较好的解决 SEO 的问题\n3. Prerender 预渲染=>打包阶段预先生成页面\n4. 同构 两者的结合=> 参考框架 Nuxt.js\n\n{% note warning %}\n注：SSR 需要路由需要使用 history 模式\n{% endnote %}\n","source":"_posts/Vue的一些面试题.md","raw":"---\ntitle: Vue的一些面试题\ndate: 2023-04-08 16:03:29\ncategories: [面试题]\ntags: [Vue]\n---\n\n# Vue 的生命周期\n\n> 老常规第一问\n\n- Vue2：beforeCreate => created => beforeMount => mounted => beforeUpdate => updated => beforeDestroy => destroyed\n- Vue3：setup => onBeforeMount => onMount => onBeforeUpdate => onUpdated => onBeforeUnmount => onUnmounted\n\n> keep-alive\n\n- Vue2：activated 、deactivated\n- Vue3：onActivated 、onDeactivated\n\n> 捕获一个来自子孙组件的异常\n\n- vue2：errorCaptured\n- vue3：onErrorCaptured\n\n# 父子生命周期的顺序\n\n子组件先挂载，然后父组件，更新也类似\n\n# v-model 原理\n\nv-model 是 vue 的语法糖\n\ninput[text/number/password]、textarea 元素使用的 value 属性和 input 事件\n\ninput[checkbox/radio]元素使用的 checked 属性和 change 事件\n\nselect 元素将 value 作为 prop 并将 change 作为事件\n\n# 为什么 data 是个函数\n\n因为组件会被复用需要保证唯一性\n\n# Keep-alive 的了解\n\nkeep-alive 是 vue 内部的组件 可以使被包含的组件保留状态，避免重新渲染\n\n1.  一般结合路由和动态组件一起使用，用于缓存组件\n2.  提供的 include 和 exclude 属性\n    - include => 只有匹配的会缓存\n    - exclude => 匹配的不会缓存 优先级比 include 高\n3.  对象两个特殊钩子函数 activated 和 deactivated\n\n# computed 和 watch 的区别和运用场景\n\n- computed:计算属性,有缓存,当我们需要进行数值计算，并且依赖于其他数据时使用\n- watch:监听,当我们需要异步或开销较大的操作时使用,可以根据需要限制我们操作的频次\n\n{% post_link computed和watch的区别 %}\n\n# 聊聊 nextTick\n\n1. 把回调函数放入 callbacks 等待执行\n2. 将执行函数放入微任务或宏任务中\n   > 为什么是微任务或宏任务？\n   > 对当前环境进行了降级处理 Promise => MutationObserver => setImmediate => setTimeout (1、2 微任务 3、4 宏任务)\n3. 事件循环到微任务或宏任务，执行函数依次执行 callbacks 中的回调\n\n# render\n\n> 为什么使用 render 函数？\n\nVUE 推荐在绝大多数情况下使用 template 来创建我们的 HTML。然而在一些场景中，我们真的需要 JavaScript 的完全编程的能力，这就是 render 函数，它比 template 更接近编译器。（这是官方的话）\n简单来说，我们为什么要使用 render 函数呢？？ 便是因为我们最经常使用的一个引入。\n\n> render 函数的解析\n\nrender 函数即渲染函数，它是个函数，它的参数 createElement 也是个函数。\n\ncreateElement 有三个参数\n\n1. 一个 HTML 标签字符串 必选\n2. 一个包含模板相关属性的数据对象 可选\n3. 子虚拟节点 可选\n\n[查看原文](https://blog.csdn.net/m0_59722204/article/details/126907040)\n\n# v-show 与 v-if 的区别\n\n- v-if 是条件渲染 确保在切换过程中条件块内的事件监听器和子组件适当地被销毁重建\n- v-show 元素总会被渲染，且只是简单地基于 display 属性进行切换\n\n# Class 与 Style 如何动态绑定\n\n- 对象语法\n- 数组语法\n\n# vue-router 路由模式有几种\n\n1. hash location.hash 向服务端发出请求是 hash 部分不会被发送\n2. history HTML5 提供了 History API 来实现 URL 的变化\n   - history.pushState()\n   - history.repalceState()\n3. abstract 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.\n\n# SPA 单页的理解 优缺点\n\n- SPA 仅在页面初始化时加载相应的 html、js、css 等\n- SPA 不会因为用户的操作而进行页面的重新加载和跳转；取而代之的是利用路由机制实现页面内容的变化\n\n> 优点：\n\n1. 用户体验好、快、内容的改变不需重新加载整个页面，避免不必要的跳转和重新渲染\n2. SPA 相对服务器压力小；\n3. 前后端分离，架构清晰，前端负责交互逻辑，后端提供相应的数据接口；\n\n> 缺点：\n\n1. 首屏加载等待问题；\n2. SEO 难度大\n\n> SPA\n\n1. CSR 客户端渲染=>当前主流模式\n2. SSR 服务端渲染=>能较好的解决 SEO 的问题\n3. Prerender 预渲染=>打包阶段预先生成页面\n4. 同构 两者的结合=> 参考框架 Nuxt.js\n\n{% note warning %}\n注：SSR 需要路由需要使用 history 模式\n{% endnote %}\n","slug":"Vue的一些面试题","published":1,"updated":"2023-04-08T10:22:37.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg7v9nfz0001tfxc2jkvc4ne","content":"<h1 id=\"Vue-的生命周期\"><a href=\"#Vue-的生命周期\" class=\"headerlink\" title=\"Vue 的生命周期\"></a>Vue 的生命周期</h1><blockquote>\n<p>老常规第一问</p>\n</blockquote>\n<ul>\n<li>Vue2：beforeCreate &#x3D;&gt; created &#x3D;&gt; beforeMount &#x3D;&gt; mounted &#x3D;&gt; beforeUpdate &#x3D;&gt; updated &#x3D;&gt; beforeDestroy &#x3D;&gt; destroyed</li>\n<li>Vue3：setup &#x3D;&gt; onBeforeMount &#x3D;&gt; onMount &#x3D;&gt; onBeforeUpdate &#x3D;&gt; onUpdated &#x3D;&gt; onBeforeUnmount &#x3D;&gt; onUnmounted</li>\n</ul>\n<blockquote>\n<p>keep-alive</p>\n</blockquote>\n<ul>\n<li>Vue2：activated 、deactivated</li>\n<li>Vue3：onActivated 、onDeactivated</li>\n</ul>\n<blockquote>\n<p>捕获一个来自子孙组件的异常</p>\n</blockquote>\n<ul>\n<li>vue2：errorCaptured</li>\n<li>vue3：onErrorCaptured</li>\n</ul>\n<h1 id=\"父子生命周期的顺序\"><a href=\"#父子生命周期的顺序\" class=\"headerlink\" title=\"父子生命周期的顺序\"></a>父子生命周期的顺序</h1><p>子组件先挂载，然后父组件，更新也类似</p>\n<h1 id=\"v-model-原理\"><a href=\"#v-model-原理\" class=\"headerlink\" title=\"v-model 原理\"></a>v-model 原理</h1><p>v-model 是 vue 的语法糖</p>\n<p>input[text&#x2F;number&#x2F;password]、textarea 元素使用的 value 属性和 input 事件</p>\n<p>input[checkbox&#x2F;radio]元素使用的 checked 属性和 change 事件</p>\n<p>select 元素将 value 作为 prop 并将 change 作为事件</p>\n<h1 id=\"为什么-data-是个函数\"><a href=\"#为什么-data-是个函数\" class=\"headerlink\" title=\"为什么 data 是个函数\"></a>为什么 data 是个函数</h1><p>因为组件会被复用需要保证唯一性</p>\n<h1 id=\"Keep-alive-的了解\"><a href=\"#Keep-alive-的了解\" class=\"headerlink\" title=\"Keep-alive 的了解\"></a>Keep-alive 的了解</h1><p>keep-alive 是 vue 内部的组件 可以使被包含的组件保留状态，避免重新渲染</p>\n<ol>\n<li>一般结合路由和动态组件一起使用，用于缓存组件</li>\n<li>提供的 include 和 exclude 属性<ul>\n<li>include &#x3D;&gt; 只有匹配的会缓存</li>\n<li>exclude &#x3D;&gt; 匹配的不会缓存 优先级比 include 高</li>\n</ul>\n</li>\n<li>对象两个特殊钩子函数 activated 和 deactivated</li>\n</ol>\n<h1 id=\"computed-和-watch-的区别和运用场景\"><a href=\"#computed-和-watch-的区别和运用场景\" class=\"headerlink\" title=\"computed 和 watch 的区别和运用场景\"></a>computed 和 watch 的区别和运用场景</h1><ul>\n<li>computed:计算属性,有缓存,当我们需要进行数值计算，并且依赖于其他数据时使用</li>\n<li>watch:监听,当我们需要异步或开销较大的操作时使用,可以根据需要限制我们操作的频次</li>\n</ul>\n<a href=\"/xiaolanchong.githug.io/2023/04/08/computed%E5%92%8Cwatch%E7%9A%84%E5%8C%BA%E5%88%AB/\" title=\"computed和watch的区别\">computed和watch的区别</a>\n\n<h1 id=\"聊聊-nextTick\"><a href=\"#聊聊-nextTick\" class=\"headerlink\" title=\"聊聊 nextTick\"></a>聊聊 nextTick</h1><ol>\n<li>把回调函数放入 callbacks 等待执行</li>\n<li>将执行函数放入微任务或宏任务中<blockquote>\n<p>为什么是微任务或宏任务？<br>对当前环境进行了降级处理 Promise &#x3D;&gt; MutationObserver &#x3D;&gt; setImmediate &#x3D;&gt; setTimeout (1、2 微任务 3、4 宏任务)</p>\n</blockquote>\n</li>\n<li>事件循环到微任务或宏任务，执行函数依次执行 callbacks 中的回调</li>\n</ol>\n<h1 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h1><blockquote>\n<p>为什么使用 render 函数？</p>\n</blockquote>\n<p>VUE 推荐在绝大多数情况下使用 template 来创建我们的 HTML。然而在一些场景中，我们真的需要 JavaScript 的完全编程的能力，这就是 render 函数，它比 template 更接近编译器。（这是官方的话）<br>简单来说，我们为什么要使用 render 函数呢？？ 便是因为我们最经常使用的一个引入。</p>\n<blockquote>\n<p>render 函数的解析</p>\n</blockquote>\n<p>render 函数即渲染函数，它是个函数，它的参数 createElement 也是个函数。</p>\n<p>createElement 有三个参数</p>\n<ol>\n<li>一个 HTML 标签字符串 必选</li>\n<li>一个包含模板相关属性的数据对象 可选</li>\n<li>子虚拟节点 可选</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/m0_59722204/article/details/126907040\">查看原文</a></p>\n<h1 id=\"v-show-与-v-if-的区别\"><a href=\"#v-show-与-v-if-的区别\" class=\"headerlink\" title=\"v-show 与 v-if 的区别\"></a>v-show 与 v-if 的区别</h1><ul>\n<li>v-if 是条件渲染 确保在切换过程中条件块内的事件监听器和子组件适当地被销毁重建</li>\n<li>v-show 元素总会被渲染，且只是简单地基于 display 属性进行切换</li>\n</ul>\n<h1 id=\"Class-与-Style-如何动态绑定\"><a href=\"#Class-与-Style-如何动态绑定\" class=\"headerlink\" title=\"Class 与 Style 如何动态绑定\"></a>Class 与 Style 如何动态绑定</h1><ul>\n<li>对象语法</li>\n<li>数组语法</li>\n</ul>\n<h1 id=\"vue-router-路由模式有几种\"><a href=\"#vue-router-路由模式有几种\" class=\"headerlink\" title=\"vue-router 路由模式有几种\"></a>vue-router 路由模式有几种</h1><ol>\n<li>hash location.hash 向服务端发出请求是 hash 部分不会被发送</li>\n<li>history HTML5 提供了 History API 来实现 URL 的变化<ul>\n<li>history.pushState()</li>\n<li>history.repalceState()</li>\n</ul>\n</li>\n<li>abstract 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.</li>\n</ol>\n<h1 id=\"SPA-单页的理解-优缺点\"><a href=\"#SPA-单页的理解-优缺点\" class=\"headerlink\" title=\"SPA 单页的理解 优缺点\"></a>SPA 单页的理解 优缺点</h1><ul>\n<li>SPA 仅在页面初始化时加载相应的 html、js、css 等</li>\n<li>SPA 不会因为用户的操作而进行页面的重新加载和跳转；取而代之的是利用路由机制实现页面内容的变化</li>\n</ul>\n<blockquote>\n<p>优点：</p>\n</blockquote>\n<ol>\n<li>用户体验好、快、内容的改变不需重新加载整个页面，避免不必要的跳转和重新渲染</li>\n<li>SPA 相对服务器压力小；</li>\n<li>前后端分离，架构清晰，前端负责交互逻辑，后端提供相应的数据接口；</li>\n</ol>\n<blockquote>\n<p>缺点：</p>\n</blockquote>\n<ol>\n<li>首屏加载等待问题；</li>\n<li>SEO 难度大</li>\n</ol>\n<blockquote>\n<p>SPA</p>\n</blockquote>\n<ol>\n<li>CSR 客户端渲染&#x3D;&gt;当前主流模式</li>\n<li>SSR 服务端渲染&#x3D;&gt;能较好的解决 SEO 的问题</li>\n<li>Prerender 预渲染&#x3D;&gt;打包阶段预先生成页面</li>\n<li>同构 两者的结合&#x3D;&gt; 参考框架 Nuxt.js</li>\n</ol>\n<div class=\"note note-warning\">\n            <p>注：SSR 需要路由需要使用 history 模式</p>\n          </div>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue-的生命周期\"><a href=\"#Vue-的生命周期\" class=\"headerlink\" title=\"Vue 的生命周期\"></a>Vue 的生命周期</h1><blockquote>\n<p>老常规第一问</p>\n</blockquote>\n<ul>\n<li>Vue2：beforeCreate &#x3D;&gt; created &#x3D;&gt; beforeMount &#x3D;&gt; mounted &#x3D;&gt; beforeUpdate &#x3D;&gt; updated &#x3D;&gt; beforeDestroy &#x3D;&gt; destroyed</li>\n<li>Vue3：setup &#x3D;&gt; onBeforeMount &#x3D;&gt; onMount &#x3D;&gt; onBeforeUpdate &#x3D;&gt; onUpdated &#x3D;&gt; onBeforeUnmount &#x3D;&gt; onUnmounted</li>\n</ul>\n<blockquote>\n<p>keep-alive</p>\n</blockquote>\n<ul>\n<li>Vue2：activated 、deactivated</li>\n<li>Vue3：onActivated 、onDeactivated</li>\n</ul>\n<blockquote>\n<p>捕获一个来自子孙组件的异常</p>\n</blockquote>\n<ul>\n<li>vue2：errorCaptured</li>\n<li>vue3：onErrorCaptured</li>\n</ul>\n<h1 id=\"父子生命周期的顺序\"><a href=\"#父子生命周期的顺序\" class=\"headerlink\" title=\"父子生命周期的顺序\"></a>父子生命周期的顺序</h1><p>子组件先挂载，然后父组件，更新也类似</p>\n<h1 id=\"v-model-原理\"><a href=\"#v-model-原理\" class=\"headerlink\" title=\"v-model 原理\"></a>v-model 原理</h1><p>v-model 是 vue 的语法糖</p>\n<p>input[text&#x2F;number&#x2F;password]、textarea 元素使用的 value 属性和 input 事件</p>\n<p>input[checkbox&#x2F;radio]元素使用的 checked 属性和 change 事件</p>\n<p>select 元素将 value 作为 prop 并将 change 作为事件</p>\n<h1 id=\"为什么-data-是个函数\"><a href=\"#为什么-data-是个函数\" class=\"headerlink\" title=\"为什么 data 是个函数\"></a>为什么 data 是个函数</h1><p>因为组件会被复用需要保证唯一性</p>\n<h1 id=\"Keep-alive-的了解\"><a href=\"#Keep-alive-的了解\" class=\"headerlink\" title=\"Keep-alive 的了解\"></a>Keep-alive 的了解</h1><p>keep-alive 是 vue 内部的组件 可以使被包含的组件保留状态，避免重新渲染</p>\n<ol>\n<li>一般结合路由和动态组件一起使用，用于缓存组件</li>\n<li>提供的 include 和 exclude 属性<ul>\n<li>include &#x3D;&gt; 只有匹配的会缓存</li>\n<li>exclude &#x3D;&gt; 匹配的不会缓存 优先级比 include 高</li>\n</ul>\n</li>\n<li>对象两个特殊钩子函数 activated 和 deactivated</li>\n</ol>\n<h1 id=\"computed-和-watch-的区别和运用场景\"><a href=\"#computed-和-watch-的区别和运用场景\" class=\"headerlink\" title=\"computed 和 watch 的区别和运用场景\"></a>computed 和 watch 的区别和运用场景</h1><ul>\n<li>computed:计算属性,有缓存,当我们需要进行数值计算，并且依赖于其他数据时使用</li>\n<li>watch:监听,当我们需要异步或开销较大的操作时使用,可以根据需要限制我们操作的频次</li>\n</ul>\n<a href=\"/xiaolanchong.githug.io/2023/04/08/computed%E5%92%8Cwatch%E7%9A%84%E5%8C%BA%E5%88%AB/\" title=\"computed和watch的区别\">computed和watch的区别</a>\n\n<h1 id=\"聊聊-nextTick\"><a href=\"#聊聊-nextTick\" class=\"headerlink\" title=\"聊聊 nextTick\"></a>聊聊 nextTick</h1><ol>\n<li>把回调函数放入 callbacks 等待执行</li>\n<li>将执行函数放入微任务或宏任务中<blockquote>\n<p>为什么是微任务或宏任务？<br>对当前环境进行了降级处理 Promise &#x3D;&gt; MutationObserver &#x3D;&gt; setImmediate &#x3D;&gt; setTimeout (1、2 微任务 3、4 宏任务)</p>\n</blockquote>\n</li>\n<li>事件循环到微任务或宏任务，执行函数依次执行 callbacks 中的回调</li>\n</ol>\n<h1 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h1><blockquote>\n<p>为什么使用 render 函数？</p>\n</blockquote>\n<p>VUE 推荐在绝大多数情况下使用 template 来创建我们的 HTML。然而在一些场景中，我们真的需要 JavaScript 的完全编程的能力，这就是 render 函数，它比 template 更接近编译器。（这是官方的话）<br>简单来说，我们为什么要使用 render 函数呢？？ 便是因为我们最经常使用的一个引入。</p>\n<blockquote>\n<p>render 函数的解析</p>\n</blockquote>\n<p>render 函数即渲染函数，它是个函数，它的参数 createElement 也是个函数。</p>\n<p>createElement 有三个参数</p>\n<ol>\n<li>一个 HTML 标签字符串 必选</li>\n<li>一个包含模板相关属性的数据对象 可选</li>\n<li>子虚拟节点 可选</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/m0_59722204/article/details/126907040\">查看原文</a></p>\n<h1 id=\"v-show-与-v-if-的区别\"><a href=\"#v-show-与-v-if-的区别\" class=\"headerlink\" title=\"v-show 与 v-if 的区别\"></a>v-show 与 v-if 的区别</h1><ul>\n<li>v-if 是条件渲染 确保在切换过程中条件块内的事件监听器和子组件适当地被销毁重建</li>\n<li>v-show 元素总会被渲染，且只是简单地基于 display 属性进行切换</li>\n</ul>\n<h1 id=\"Class-与-Style-如何动态绑定\"><a href=\"#Class-与-Style-如何动态绑定\" class=\"headerlink\" title=\"Class 与 Style 如何动态绑定\"></a>Class 与 Style 如何动态绑定</h1><ul>\n<li>对象语法</li>\n<li>数组语法</li>\n</ul>\n<h1 id=\"vue-router-路由模式有几种\"><a href=\"#vue-router-路由模式有几种\" class=\"headerlink\" title=\"vue-router 路由模式有几种\"></a>vue-router 路由模式有几种</h1><ol>\n<li>hash location.hash 向服务端发出请求是 hash 部分不会被发送</li>\n<li>history HTML5 提供了 History API 来实现 URL 的变化<ul>\n<li>history.pushState()</li>\n<li>history.repalceState()</li>\n</ul>\n</li>\n<li>abstract 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.</li>\n</ol>\n<h1 id=\"SPA-单页的理解-优缺点\"><a href=\"#SPA-单页的理解-优缺点\" class=\"headerlink\" title=\"SPA 单页的理解 优缺点\"></a>SPA 单页的理解 优缺点</h1><ul>\n<li>SPA 仅在页面初始化时加载相应的 html、js、css 等</li>\n<li>SPA 不会因为用户的操作而进行页面的重新加载和跳转；取而代之的是利用路由机制实现页面内容的变化</li>\n</ul>\n<blockquote>\n<p>优点：</p>\n</blockquote>\n<ol>\n<li>用户体验好、快、内容的改变不需重新加载整个页面，避免不必要的跳转和重新渲染</li>\n<li>SPA 相对服务器压力小；</li>\n<li>前后端分离，架构清晰，前端负责交互逻辑，后端提供相应的数据接口；</li>\n</ol>\n<blockquote>\n<p>缺点：</p>\n</blockquote>\n<ol>\n<li>首屏加载等待问题；</li>\n<li>SEO 难度大</li>\n</ol>\n<blockquote>\n<p>SPA</p>\n</blockquote>\n<ol>\n<li>CSR 客户端渲染&#x3D;&gt;当前主流模式</li>\n<li>SSR 服务端渲染&#x3D;&gt;能较好的解决 SEO 的问题</li>\n<li>Prerender 预渲染&#x3D;&gt;打包阶段预先生成页面</li>\n<li>同构 两者的结合&#x3D;&gt; 参考框架 Nuxt.js</li>\n</ol>\n<div class=\"note note-warning\">\n            <p>注：SSR 需要路由需要使用 history 模式</p>\n          </div>\n"},{"title":"Diff算法","date":"2023-04-07T13:00:00.000Z","_content":"\n## 1、首先什么是虚拟 DOM?\n\n虚拟 DOM 就是一个普通的 JS 对象，用来描述真实的 DOM 结构的对象\n\n## 2、什么事 Diff 算法？\n\ndiff 算法是用来比较虚拟节点、并返回一个 patch 对象，用来存储新旧节点不同的地方\n简单来说：diff 的过程就是调用 patch 函数，比较新旧节点，边比较边给 DOM 打补丁\n\n> 那么 diff 算法有什么特征呢？\n\n1. 比较只会发生在同层级进行，不会跨层级比较\n2. diff 比较的过程中，循环从两边向中间比较\n\n> diff 算法的步骤\n\n- 用 js 对象结构表示 ODM 的结构，然后用这个树结果创建一个真实的 DOM，插入到页面中\n- 当状态发生变化时，重新构造一个新的对象树\n- 新旧对象树进行比较（diff）,记录差异变化\n- 把记录的差异应用到真实 DOM 树上（patch），完成视图的更新\n\n> 原理分析\n\n当数据发生变化时，set 方法会调用 Dep.notify 通知所以得订阅者 Watcher,订阅者会调用 patch 给真实的 DOM 打补丁，更新响应的视图\n\n## Vue2 中的 Diff\n\n> 双端 diff 算法\n\n1. 当数据发生变化时，订阅者 Watcher 会调用 patch 给真实 DOM 打补丁\n2. 通过 SameVnode(oldVode, newVode)进行判断，相同时则调用 patchVnode 方法\n3. patchVnode\n   - 判断文本节点，直接设置文本\n   - 子节点比较\n     一方不存在是，直接删除或创建\n     两者都有时，执行 updateChildren 函数比较子节点\n4. updateChildren\n   - 设置新旧 vnode 的头尾指针\n   - 新旧头尾进行比较，循环先中间靠拢（四个角向中间靠拢比较）\n     根据情况调用 patchVnode 进行 patch 重复流程、调用 createElem 创建一个新的节点\n     从哈希表寻找 key 一致的 vNode 节点再分情况操作\n\n## vue3 中的 Diff\n\n> 快速 diff 算法\n\nVue3 在真正的 diff 之前会执行一段“预处理”的前置操作，目的是先把科一直接排除的项直接去掉\n\n1. 对比新旧节点头部相同指针的节点，相同则进行 diff，不同就跳转下一步\n2. 新旧节点尾部指针指向的节点，相同则进行 diff，不同就跳转下一步\n3. 此时剩余新旧节点可能存在乱序、一移除、新创建的情况，进行特殊处理来更新\n   - 增删节点\n   - diff\n     首先根据新节点剩余内容，跟 key 创建一个 map 映射\n     最长递增子序列 为减少 dom 的操作\n\n> vue3 牺牲了一部分 js 性能，换来了 dom 渲染的性能\n","source":"_posts/Diff算法.md","raw":"---\ntitle: Diff算法\ndate: 2023-04-07 21:00:00\ncategories: [面试题]\ntags: [Vue, Diff]\n---\n\n## 1、首先什么是虚拟 DOM?\n\n虚拟 DOM 就是一个普通的 JS 对象，用来描述真实的 DOM 结构的对象\n\n## 2、什么事 Diff 算法？\n\ndiff 算法是用来比较虚拟节点、并返回一个 patch 对象，用来存储新旧节点不同的地方\n简单来说：diff 的过程就是调用 patch 函数，比较新旧节点，边比较边给 DOM 打补丁\n\n> 那么 diff 算法有什么特征呢？\n\n1. 比较只会发生在同层级进行，不会跨层级比较\n2. diff 比较的过程中，循环从两边向中间比较\n\n> diff 算法的步骤\n\n- 用 js 对象结构表示 ODM 的结构，然后用这个树结果创建一个真实的 DOM，插入到页面中\n- 当状态发生变化时，重新构造一个新的对象树\n- 新旧对象树进行比较（diff）,记录差异变化\n- 把记录的差异应用到真实 DOM 树上（patch），完成视图的更新\n\n> 原理分析\n\n当数据发生变化时，set 方法会调用 Dep.notify 通知所以得订阅者 Watcher,订阅者会调用 patch 给真实的 DOM 打补丁，更新响应的视图\n\n## Vue2 中的 Diff\n\n> 双端 diff 算法\n\n1. 当数据发生变化时，订阅者 Watcher 会调用 patch 给真实 DOM 打补丁\n2. 通过 SameVnode(oldVode, newVode)进行判断，相同时则调用 patchVnode 方法\n3. patchVnode\n   - 判断文本节点，直接设置文本\n   - 子节点比较\n     一方不存在是，直接删除或创建\n     两者都有时，执行 updateChildren 函数比较子节点\n4. updateChildren\n   - 设置新旧 vnode 的头尾指针\n   - 新旧头尾进行比较，循环先中间靠拢（四个角向中间靠拢比较）\n     根据情况调用 patchVnode 进行 patch 重复流程、调用 createElem 创建一个新的节点\n     从哈希表寻找 key 一致的 vNode 节点再分情况操作\n\n## vue3 中的 Diff\n\n> 快速 diff 算法\n\nVue3 在真正的 diff 之前会执行一段“预处理”的前置操作，目的是先把科一直接排除的项直接去掉\n\n1. 对比新旧节点头部相同指针的节点，相同则进行 diff，不同就跳转下一步\n2. 新旧节点尾部指针指向的节点，相同则进行 diff，不同就跳转下一步\n3. 此时剩余新旧节点可能存在乱序、一移除、新创建的情况，进行特殊处理来更新\n   - 增删节点\n   - diff\n     首先根据新节点剩余内容，跟 key 创建一个 map 映射\n     最长递增子序列 为减少 dom 的操作\n\n> vue3 牺牲了一部分 js 性能，换来了 dom 渲染的性能\n","slug":"Diff算法","published":1,"updated":"2023-04-08T04:44:32.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg7v9ng30003tfxc0j1q5jfy","content":"<h2 id=\"1、首先什么是虚拟-DOM\"><a href=\"#1、首先什么是虚拟-DOM\" class=\"headerlink\" title=\"1、首先什么是虚拟 DOM?\"></a>1、首先什么是虚拟 DOM?</h2><p>虚拟 DOM 就是一个普通的 JS 对象，用来描述真实的 DOM 结构的对象</p>\n<h2 id=\"2、什么事-Diff-算法？\"><a href=\"#2、什么事-Diff-算法？\" class=\"headerlink\" title=\"2、什么事 Diff 算法？\"></a>2、什么事 Diff 算法？</h2><p>diff 算法是用来比较虚拟节点、并返回一个 patch 对象，用来存储新旧节点不同的地方<br>简单来说：diff 的过程就是调用 patch 函数，比较新旧节点，边比较边给 DOM 打补丁</p>\n<blockquote>\n<p>那么 diff 算法有什么特征呢？</p>\n</blockquote>\n<ol>\n<li>比较只会发生在同层级进行，不会跨层级比较</li>\n<li>diff 比较的过程中，循环从两边向中间比较</li>\n</ol>\n<blockquote>\n<p>diff 算法的步骤</p>\n</blockquote>\n<ul>\n<li>用 js 对象结构表示 ODM 的结构，然后用这个树结果创建一个真实的 DOM，插入到页面中</li>\n<li>当状态发生变化时，重新构造一个新的对象树</li>\n<li>新旧对象树进行比较（diff）,记录差异变化</li>\n<li>把记录的差异应用到真实 DOM 树上（patch），完成视图的更新</li>\n</ul>\n<blockquote>\n<p>原理分析</p>\n</blockquote>\n<p>当数据发生变化时，set 方法会调用 Dep.notify 通知所以得订阅者 Watcher,订阅者会调用 patch 给真实的 DOM 打补丁，更新响应的视图</p>\n<h2 id=\"Vue2-中的-Diff\"><a href=\"#Vue2-中的-Diff\" class=\"headerlink\" title=\"Vue2 中的 Diff\"></a>Vue2 中的 Diff</h2><blockquote>\n<p>双端 diff 算法</p>\n</blockquote>\n<ol>\n<li>当数据发生变化时，订阅者 Watcher 会调用 patch 给真实 DOM 打补丁</li>\n<li>通过 SameVnode(oldVode, newVode)进行判断，相同时则调用 patchVnode 方法</li>\n<li>patchVnode<ul>\n<li>判断文本节点，直接设置文本</li>\n<li>子节点比较<br>一方不存在是，直接删除或创建<br>两者都有时，执行 updateChildren 函数比较子节点</li>\n</ul>\n</li>\n<li>updateChildren<ul>\n<li>设置新旧 vnode 的头尾指针</li>\n<li>新旧头尾进行比较，循环先中间靠拢（四个角向中间靠拢比较）<br>根据情况调用 patchVnode 进行 patch 重复流程、调用 createElem 创建一个新的节点<br>从哈希表寻找 key 一致的 vNode 节点再分情况操作</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"vue3-中的-Diff\"><a href=\"#vue3-中的-Diff\" class=\"headerlink\" title=\"vue3 中的 Diff\"></a>vue3 中的 Diff</h2><blockquote>\n<p>快速 diff 算法</p>\n</blockquote>\n<p>Vue3 在真正的 diff 之前会执行一段“预处理”的前置操作，目的是先把科一直接排除的项直接去掉</p>\n<ol>\n<li>对比新旧节点头部相同指针的节点，相同则进行 diff，不同就跳转下一步</li>\n<li>新旧节点尾部指针指向的节点，相同则进行 diff，不同就跳转下一步</li>\n<li>此时剩余新旧节点可能存在乱序、一移除、新创建的情况，进行特殊处理来更新<ul>\n<li>增删节点</li>\n<li>diff<br>首先根据新节点剩余内容，跟 key 创建一个 map 映射<br>最长递增子序列 为减少 dom 的操作</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>vue3 牺牲了一部分 js 性能，换来了 dom 渲染的性能</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、首先什么是虚拟-DOM\"><a href=\"#1、首先什么是虚拟-DOM\" class=\"headerlink\" title=\"1、首先什么是虚拟 DOM?\"></a>1、首先什么是虚拟 DOM?</h2><p>虚拟 DOM 就是一个普通的 JS 对象，用来描述真实的 DOM 结构的对象</p>\n<h2 id=\"2、什么事-Diff-算法？\"><a href=\"#2、什么事-Diff-算法？\" class=\"headerlink\" title=\"2、什么事 Diff 算法？\"></a>2、什么事 Diff 算法？</h2><p>diff 算法是用来比较虚拟节点、并返回一个 patch 对象，用来存储新旧节点不同的地方<br>简单来说：diff 的过程就是调用 patch 函数，比较新旧节点，边比较边给 DOM 打补丁</p>\n<blockquote>\n<p>那么 diff 算法有什么特征呢？</p>\n</blockquote>\n<ol>\n<li>比较只会发生在同层级进行，不会跨层级比较</li>\n<li>diff 比较的过程中，循环从两边向中间比较</li>\n</ol>\n<blockquote>\n<p>diff 算法的步骤</p>\n</blockquote>\n<ul>\n<li>用 js 对象结构表示 ODM 的结构，然后用这个树结果创建一个真实的 DOM，插入到页面中</li>\n<li>当状态发生变化时，重新构造一个新的对象树</li>\n<li>新旧对象树进行比较（diff）,记录差异变化</li>\n<li>把记录的差异应用到真实 DOM 树上（patch），完成视图的更新</li>\n</ul>\n<blockquote>\n<p>原理分析</p>\n</blockquote>\n<p>当数据发生变化时，set 方法会调用 Dep.notify 通知所以得订阅者 Watcher,订阅者会调用 patch 给真实的 DOM 打补丁，更新响应的视图</p>\n<h2 id=\"Vue2-中的-Diff\"><a href=\"#Vue2-中的-Diff\" class=\"headerlink\" title=\"Vue2 中的 Diff\"></a>Vue2 中的 Diff</h2><blockquote>\n<p>双端 diff 算法</p>\n</blockquote>\n<ol>\n<li>当数据发生变化时，订阅者 Watcher 会调用 patch 给真实 DOM 打补丁</li>\n<li>通过 SameVnode(oldVode, newVode)进行判断，相同时则调用 patchVnode 方法</li>\n<li>patchVnode<ul>\n<li>判断文本节点，直接设置文本</li>\n<li>子节点比较<br>一方不存在是，直接删除或创建<br>两者都有时，执行 updateChildren 函数比较子节点</li>\n</ul>\n</li>\n<li>updateChildren<ul>\n<li>设置新旧 vnode 的头尾指针</li>\n<li>新旧头尾进行比较，循环先中间靠拢（四个角向中间靠拢比较）<br>根据情况调用 patchVnode 进行 patch 重复流程、调用 createElem 创建一个新的节点<br>从哈希表寻找 key 一致的 vNode 节点再分情况操作</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"vue3-中的-Diff\"><a href=\"#vue3-中的-Diff\" class=\"headerlink\" title=\"vue3 中的 Diff\"></a>vue3 中的 Diff</h2><blockquote>\n<p>快速 diff 算法</p>\n</blockquote>\n<p>Vue3 在真正的 diff 之前会执行一段“预处理”的前置操作，目的是先把科一直接排除的项直接去掉</p>\n<ol>\n<li>对比新旧节点头部相同指针的节点，相同则进行 diff，不同就跳转下一步</li>\n<li>新旧节点尾部指针指向的节点，相同则进行 diff，不同就跳转下一步</li>\n<li>此时剩余新旧节点可能存在乱序、一移除、新创建的情况，进行特殊处理来更新<ul>\n<li>增删节点</li>\n<li>diff<br>首先根据新节点剩余内容，跟 key 创建一个 map 映射<br>最长递增子序列 为减少 dom 的操作</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>vue3 牺牲了一部分 js 性能，换来了 dom 渲染的性能</p>\n</blockquote>\n"},{"title":"Vue组件间的通讯方式","date":"2023-04-08T04:44:03.000Z","_content":"\n# Vue 组件间的通讯方式\n\n{% note warning %}\nVue 是单项数据流\n{% endnote %}\n\n## 父组件向子组件传递 props\n\n父组件通过 props 向子组件传递数据，子组件通过 $emit 和父组件通信\n\n> 父组件\n\n```html\n<script setup>\n  import { ref } from 'vue';\n  import Child from './components/Child.vue';\n\n  const msg = ref('msg');\n  const changeMsg = (str) => {\n    msg.value = str;\n  };\n</script>\n\n<template>\n  <Child :msg=\"msg\" :fn=\"changeMsg\" />\n</template>\n\n<style scoped></style>\n```\n\n> 子组件\n\n```html\n<script setup>\n  defineProps({\n    msg: String,\n    fn: Function\n  });\n</script>\n\n<template>\n  <div>{{ msg }}</div>\n  <button @click=\"fn('change msg')\">change msg</button>\n</template>\n\n<style scoped></style>\n```\n\n## 子组件向父组件传递 $emit\n\n$emit 的特点\n\n- $emit 绑定一个自定义事件，当事件被执行的时候会将参数传递给父组件，而父组件通过 v-on 监听并接受参数\n\n> 父组件\n\n```html\n<script setup>\n  import { ref } from 'vue';\n  import Child from './components/Child.vue';\n\n  const msg = ref('msg');\n  const changeMsg = (str) => {\n    msg.value = str;\n  };\n</script>\n\n<template>\n  <Child :msg=\"msg\" @fn=\"changeMsg\" />\n</template>\n\n<style scoped></style>\n```\n\n> 子组件\n\n```html\n<script setup>\n  defineProps({\n    msg: String\n  });\n  defineEmits(['fn']);\n</script>\n\n<template>\n  <div>{{ msg }}</div>\n  <button @click=\"$emit('fn', 'change msg')\">change msg</button>\n</template>\n\n<style scoped></style>\n```\n\n## 兄弟组件传递\n\n1. 兄弟组件间通信可以借助父组件交互\n\n## ref / $refs\n\n该方法也是实现父子组件通信的\n\nref: 该属性用在子组件上，他指向子组件的实例，可以通过实例来访问组件的数据和方法\n\n> 子组件\n\n```html\n<script setup>\n  import { ref } from 'vue';\n  const msg = ref('msg');\n  const changeMsg = (str) => {\n    msg.value = str;\n  };\n  // vue3需要主动暴露\n  defineExpose({\n    msg,\n    changeMsg\n  });\n</script>\n\n<template>\n  <div>{{ msg }}</div>\n</template>\n\n<style scoped></style>\n```\n\n> 父组件\n\n```html\n<script setup>\n  import { ref } from 'vue';\n  import Child from './components/Child.vue';\n  const refChild = ref(null);\n  const changeMsg = (str) => {\n    // onMounted后才能获取到\n    refChild.value?.changeMsg(str);\n  };\n</script>\n\n<template>\n  <Child ref=\"refChild\" />\n  <button @click=\"changeMsg('change msg')\">change msg</button>\n</template>\n\n<style scoped></style>\n```\n\n# 依赖注入 provide / inject\n\n该方法就是 vue 中的依赖主人，该方法用于父子/祖孙组件间的通信\n\nprovide/inject 是 vue 提供的两个钩子\n\n- provide 用来发送数据或方法\n- inject 用来接受数据或方法\n\n> 父组件\n\n```html\n<script setup>\n  import { ref, provide } from 'vue';\n  import Child from './components/Child.vue';\n  const msg = ref('msg');\n  const changeMsg = (str) => {\n    msg.value = str;\n  };\n  provide('msg', msg);\n  provide('changeMsg', changeMsg);\n</script>\n\n<template>\n  <div>{{ msg }}</div>\n  <Child />\n</template>\n\n<style scoped></style>\n```\n\n> 子组件\n\n```html\n<script setup>\n  import { ref, inject } from 'vue';\n  const msg = inject('msg');\n  const changeMsg = inject('changeMsg');\n</script>\n\n<template>\n  <div>{{ msg }}</div>\n  <button @click=\"changeMsg('change msg')\">change msg</button>\n</template>\n\n<style scoped></style>\n```\n\n## $parent / $children\n\n> $parent\n\n> $children（vue3 已移除）\n\n```javascript\nthis.$children[0].message = 'JavaScript';\n```\n\n## vuex\n\n## eventBus\n\n## mitt\n\n## $attrs $listeners\n","source":"_posts/Vue组件间的通讯方式.md","raw":"---\ntitle: Vue组件间的通讯方式\ndate: 2023-04-08 12:44:03\ncategories: [面试题]\ntags: [Vue]\n---\n\n# Vue 组件间的通讯方式\n\n{% note warning %}\nVue 是单项数据流\n{% endnote %}\n\n## 父组件向子组件传递 props\n\n父组件通过 props 向子组件传递数据，子组件通过 $emit 和父组件通信\n\n> 父组件\n\n```html\n<script setup>\n  import { ref } from 'vue';\n  import Child from './components/Child.vue';\n\n  const msg = ref('msg');\n  const changeMsg = (str) => {\n    msg.value = str;\n  };\n</script>\n\n<template>\n  <Child :msg=\"msg\" :fn=\"changeMsg\" />\n</template>\n\n<style scoped></style>\n```\n\n> 子组件\n\n```html\n<script setup>\n  defineProps({\n    msg: String,\n    fn: Function\n  });\n</script>\n\n<template>\n  <div>{{ msg }}</div>\n  <button @click=\"fn('change msg')\">change msg</button>\n</template>\n\n<style scoped></style>\n```\n\n## 子组件向父组件传递 $emit\n\n$emit 的特点\n\n- $emit 绑定一个自定义事件，当事件被执行的时候会将参数传递给父组件，而父组件通过 v-on 监听并接受参数\n\n> 父组件\n\n```html\n<script setup>\n  import { ref } from 'vue';\n  import Child from './components/Child.vue';\n\n  const msg = ref('msg');\n  const changeMsg = (str) => {\n    msg.value = str;\n  };\n</script>\n\n<template>\n  <Child :msg=\"msg\" @fn=\"changeMsg\" />\n</template>\n\n<style scoped></style>\n```\n\n> 子组件\n\n```html\n<script setup>\n  defineProps({\n    msg: String\n  });\n  defineEmits(['fn']);\n</script>\n\n<template>\n  <div>{{ msg }}</div>\n  <button @click=\"$emit('fn', 'change msg')\">change msg</button>\n</template>\n\n<style scoped></style>\n```\n\n## 兄弟组件传递\n\n1. 兄弟组件间通信可以借助父组件交互\n\n## ref / $refs\n\n该方法也是实现父子组件通信的\n\nref: 该属性用在子组件上，他指向子组件的实例，可以通过实例来访问组件的数据和方法\n\n> 子组件\n\n```html\n<script setup>\n  import { ref } from 'vue';\n  const msg = ref('msg');\n  const changeMsg = (str) => {\n    msg.value = str;\n  };\n  // vue3需要主动暴露\n  defineExpose({\n    msg,\n    changeMsg\n  });\n</script>\n\n<template>\n  <div>{{ msg }}</div>\n</template>\n\n<style scoped></style>\n```\n\n> 父组件\n\n```html\n<script setup>\n  import { ref } from 'vue';\n  import Child from './components/Child.vue';\n  const refChild = ref(null);\n  const changeMsg = (str) => {\n    // onMounted后才能获取到\n    refChild.value?.changeMsg(str);\n  };\n</script>\n\n<template>\n  <Child ref=\"refChild\" />\n  <button @click=\"changeMsg('change msg')\">change msg</button>\n</template>\n\n<style scoped></style>\n```\n\n# 依赖注入 provide / inject\n\n该方法就是 vue 中的依赖主人，该方法用于父子/祖孙组件间的通信\n\nprovide/inject 是 vue 提供的两个钩子\n\n- provide 用来发送数据或方法\n- inject 用来接受数据或方法\n\n> 父组件\n\n```html\n<script setup>\n  import { ref, provide } from 'vue';\n  import Child from './components/Child.vue';\n  const msg = ref('msg');\n  const changeMsg = (str) => {\n    msg.value = str;\n  };\n  provide('msg', msg);\n  provide('changeMsg', changeMsg);\n</script>\n\n<template>\n  <div>{{ msg }}</div>\n  <Child />\n</template>\n\n<style scoped></style>\n```\n\n> 子组件\n\n```html\n<script setup>\n  import { ref, inject } from 'vue';\n  const msg = inject('msg');\n  const changeMsg = inject('changeMsg');\n</script>\n\n<template>\n  <div>{{ msg }}</div>\n  <button @click=\"changeMsg('change msg')\">change msg</button>\n</template>\n\n<style scoped></style>\n```\n\n## $parent / $children\n\n> $parent\n\n> $children（vue3 已移除）\n\n```javascript\nthis.$children[0].message = 'JavaScript';\n```\n\n## vuex\n\n## eventBus\n\n## mitt\n\n## $attrs $listeners\n","slug":"Vue组件间的通讯方式","published":1,"updated":"2023-04-08T09:33:55.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg7v9ng80006tfxch6wg0epp","content":"<h1 id=\"Vue-组件间的通讯方式\"><a href=\"#Vue-组件间的通讯方式\" class=\"headerlink\" title=\"Vue 组件间的通讯方式\"></a>Vue 组件间的通讯方式</h1><div class=\"note note-warning\">\n            <p>Vue 是单项数据流</p>\n          </div>\n\n<h2 id=\"父组件向子组件传递-props\"><a href=\"#父组件向子组件传递-props\" class=\"headerlink\" title=\"父组件向子组件传递 props\"></a>父组件向子组件传递 props</h2><p>父组件通过 props 向子组件传递数据，子组件通过 $emit 和父组件通信</p>\n<blockquote>\n<p>父组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> &#123; ref &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Child</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/Child.vue&#x27;</span>;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-string\">&#x27;msg&#x27;</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">changeMsg</span> = (<span class=\"hljs-params\">str</span>) =&gt; &#123;</span><br><span class=\"language-javascript\">    msg.<span class=\"hljs-property\">value</span> = str;</span><br><span class=\"language-javascript\">  &#125;;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span> <span class=\"hljs-attr\">:msg</span>=<span class=\"hljs-string\">&quot;msg&quot;</span> <span class=\"hljs-attr\">:fn</span>=<span class=\"hljs-string\">&quot;changeMsg&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>子组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-title function_\">defineProps</span>(&#123;</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-title class_\">String</span>,</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">fn</span>: <span class=\"hljs-title class_\">Function</span></span><br><span class=\"language-javascript\">  &#125;);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;fn(&#x27;change msg&#x27;)&quot;</span>&gt;</span>change msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"子组件向父组件传递-emit\"><a href=\"#子组件向父组件传递-emit\" class=\"headerlink\" title=\"子组件向父组件传递 $emit\"></a>子组件向父组件传递 $emit</h2><p>$emit 的特点</p>\n<ul>\n<li>$emit 绑定一个自定义事件，当事件被执行的时候会将参数传递给父组件，而父组件通过 v-on 监听并接受参数</li>\n</ul>\n<blockquote>\n<p>父组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> &#123; ref &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Child</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/Child.vue&#x27;</span>;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-string\">&#x27;msg&#x27;</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">changeMsg</span> = (<span class=\"hljs-params\">str</span>) =&gt; &#123;</span><br><span class=\"language-javascript\">    msg.<span class=\"hljs-property\">value</span> = str;</span><br><span class=\"language-javascript\">  &#125;;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span> <span class=\"hljs-attr\">:msg</span>=<span class=\"hljs-string\">&quot;msg&quot;</span> @<span class=\"hljs-attr\">fn</span>=<span class=\"hljs-string\">&quot;changeMsg&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>子组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-title function_\">defineProps</span>(&#123;</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-title class_\">String</span></span><br><span class=\"language-javascript\">  &#125;);</span><br><span class=\"language-javascript\">  <span class=\"hljs-title function_\">defineEmits</span>([<span class=\"hljs-string\">&#x27;fn&#x27;</span>]);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;$emit(&#x27;fn&#x27;, &#x27;change msg&#x27;)&quot;</span>&gt;</span>change msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"兄弟组件传递\"><a href=\"#兄弟组件传递\" class=\"headerlink\" title=\"兄弟组件传递\"></a>兄弟组件传递</h2><ol>\n<li>兄弟组件间通信可以借助父组件交互</li>\n</ol>\n<h2 id=\"ref-x2F-refs\"><a href=\"#ref-x2F-refs\" class=\"headerlink\" title=\"ref &#x2F; $refs\"></a>ref &#x2F; $refs</h2><p>该方法也是实现父子组件通信的</p>\n<p>ref: 该属性用在子组件上，他指向子组件的实例，可以通过实例来访问组件的数据和方法</p>\n<blockquote>\n<p>子组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> &#123; ref &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-string\">&#x27;msg&#x27;</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">changeMsg</span> = (<span class=\"hljs-params\">str</span>) =&gt; &#123;</span><br><span class=\"language-javascript\">    msg.<span class=\"hljs-property\">value</span> = str;</span><br><span class=\"language-javascript\">  &#125;;</span><br><span class=\"language-javascript\">  <span class=\"hljs-comment\">// vue3需要主动暴露</span></span><br><span class=\"language-javascript\">  <span class=\"hljs-title function_\">defineExpose</span>(&#123;</span><br><span class=\"language-javascript\">    msg,</span><br><span class=\"language-javascript\">    changeMsg</span><br><span class=\"language-javascript\">  &#125;);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>父组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> &#123; ref &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Child</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/Child.vue&#x27;</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> refChild = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-literal\">null</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">changeMsg</span> = (<span class=\"hljs-params\">str</span>) =&gt; &#123;</span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">// onMounted后才能获取到</span></span><br><span class=\"language-javascript\">    refChild.<span class=\"hljs-property\">value</span>?.<span class=\"hljs-title function_\">changeMsg</span>(str);</span><br><span class=\"language-javascript\">  &#125;;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;refChild&quot;</span> /&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;changeMsg(&#x27;change msg&#x27;)&quot;</span>&gt;</span>change msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"依赖注入-provide-x2F-inject\"><a href=\"#依赖注入-provide-x2F-inject\" class=\"headerlink\" title=\"依赖注入 provide &#x2F; inject\"></a>依赖注入 provide &#x2F; inject</h1><p>该方法就是 vue 中的依赖主人，该方法用于父子&#x2F;祖孙组件间的通信</p>\n<p>provide&#x2F;inject 是 vue 提供的两个钩子</p>\n<ul>\n<li>provide 用来发送数据或方法</li>\n<li>inject 用来接受数据或方法</li>\n</ul>\n<blockquote>\n<p>父组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> &#123; ref, provide &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Child</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/Child.vue&#x27;</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-string\">&#x27;msg&#x27;</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">changeMsg</span> = (<span class=\"hljs-params\">str</span>) =&gt; &#123;</span><br><span class=\"language-javascript\">    msg.<span class=\"hljs-property\">value</span> = str;</span><br><span class=\"language-javascript\">  &#125;;</span><br><span class=\"language-javascript\">  <span class=\"hljs-title function_\">provide</span>(<span class=\"hljs-string\">&#x27;msg&#x27;</span>, msg);</span><br><span class=\"language-javascript\">  <span class=\"hljs-title function_\">provide</span>(<span class=\"hljs-string\">&#x27;changeMsg&#x27;</span>, changeMsg);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>子组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> &#123; ref, inject &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-string\">&#x27;msg&#x27;</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> changeMsg = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-string\">&#x27;changeMsg&#x27;</span>);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;changeMsg(&#x27;change msg&#x27;)&quot;</span>&gt;</span>change msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"parent-x2F-children\"><a href=\"#parent-x2F-children\" class=\"headerlink\" title=\"$parent &#x2F; $children\"></a>$parent &#x2F; $children</h2><blockquote>\n<p>$parent</p>\n</blockquote>\n<blockquote>\n<p>$children（vue3 已移除）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$children</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">message</span> = <span class=\"hljs-string\">&#x27;JavaScript&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h2><h2 id=\"eventBus\"><a href=\"#eventBus\" class=\"headerlink\" title=\"eventBus\"></a>eventBus</h2><h2 id=\"mitt\"><a href=\"#mitt\" class=\"headerlink\" title=\"mitt\"></a>mitt</h2><h2 id=\"attrs-listeners\"><a href=\"#attrs-listeners\" class=\"headerlink\" title=\"$attrs $listeners\"></a>$attrs $listeners</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue-组件间的通讯方式\"><a href=\"#Vue-组件间的通讯方式\" class=\"headerlink\" title=\"Vue 组件间的通讯方式\"></a>Vue 组件间的通讯方式</h1><div class=\"note note-warning\">\n            <p>Vue 是单项数据流</p>\n          </div>\n\n<h2 id=\"父组件向子组件传递-props\"><a href=\"#父组件向子组件传递-props\" class=\"headerlink\" title=\"父组件向子组件传递 props\"></a>父组件向子组件传递 props</h2><p>父组件通过 props 向子组件传递数据，子组件通过 $emit 和父组件通信</p>\n<blockquote>\n<p>父组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> &#123; ref &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Child</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/Child.vue&#x27;</span>;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-string\">&#x27;msg&#x27;</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">changeMsg</span> = (<span class=\"hljs-params\">str</span>) =&gt; &#123;</span><br><span class=\"language-javascript\">    msg.<span class=\"hljs-property\">value</span> = str;</span><br><span class=\"language-javascript\">  &#125;;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span> <span class=\"hljs-attr\">:msg</span>=<span class=\"hljs-string\">&quot;msg&quot;</span> <span class=\"hljs-attr\">:fn</span>=<span class=\"hljs-string\">&quot;changeMsg&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>子组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-title function_\">defineProps</span>(&#123;</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-title class_\">String</span>,</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">fn</span>: <span class=\"hljs-title class_\">Function</span></span><br><span class=\"language-javascript\">  &#125;);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;fn(&#x27;change msg&#x27;)&quot;</span>&gt;</span>change msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"子组件向父组件传递-emit\"><a href=\"#子组件向父组件传递-emit\" class=\"headerlink\" title=\"子组件向父组件传递 $emit\"></a>子组件向父组件传递 $emit</h2><p>$emit 的特点</p>\n<ul>\n<li>$emit 绑定一个自定义事件，当事件被执行的时候会将参数传递给父组件，而父组件通过 v-on 监听并接受参数</li>\n</ul>\n<blockquote>\n<p>父组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> &#123; ref &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Child</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/Child.vue&#x27;</span>;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-string\">&#x27;msg&#x27;</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">changeMsg</span> = (<span class=\"hljs-params\">str</span>) =&gt; &#123;</span><br><span class=\"language-javascript\">    msg.<span class=\"hljs-property\">value</span> = str;</span><br><span class=\"language-javascript\">  &#125;;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span> <span class=\"hljs-attr\">:msg</span>=<span class=\"hljs-string\">&quot;msg&quot;</span> @<span class=\"hljs-attr\">fn</span>=<span class=\"hljs-string\">&quot;changeMsg&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>子组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-title function_\">defineProps</span>(&#123;</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-title class_\">String</span></span><br><span class=\"language-javascript\">  &#125;);</span><br><span class=\"language-javascript\">  <span class=\"hljs-title function_\">defineEmits</span>([<span class=\"hljs-string\">&#x27;fn&#x27;</span>]);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;$emit(&#x27;fn&#x27;, &#x27;change msg&#x27;)&quot;</span>&gt;</span>change msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"兄弟组件传递\"><a href=\"#兄弟组件传递\" class=\"headerlink\" title=\"兄弟组件传递\"></a>兄弟组件传递</h2><ol>\n<li>兄弟组件间通信可以借助父组件交互</li>\n</ol>\n<h2 id=\"ref-x2F-refs\"><a href=\"#ref-x2F-refs\" class=\"headerlink\" title=\"ref &#x2F; $refs\"></a>ref &#x2F; $refs</h2><p>该方法也是实现父子组件通信的</p>\n<p>ref: 该属性用在子组件上，他指向子组件的实例，可以通过实例来访问组件的数据和方法</p>\n<blockquote>\n<p>子组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> &#123; ref &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-string\">&#x27;msg&#x27;</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">changeMsg</span> = (<span class=\"hljs-params\">str</span>) =&gt; &#123;</span><br><span class=\"language-javascript\">    msg.<span class=\"hljs-property\">value</span> = str;</span><br><span class=\"language-javascript\">  &#125;;</span><br><span class=\"language-javascript\">  <span class=\"hljs-comment\">// vue3需要主动暴露</span></span><br><span class=\"language-javascript\">  <span class=\"hljs-title function_\">defineExpose</span>(&#123;</span><br><span class=\"language-javascript\">    msg,</span><br><span class=\"language-javascript\">    changeMsg</span><br><span class=\"language-javascript\">  &#125;);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>父组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> &#123; ref &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Child</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/Child.vue&#x27;</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> refChild = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-literal\">null</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">changeMsg</span> = (<span class=\"hljs-params\">str</span>) =&gt; &#123;</span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">// onMounted后才能获取到</span></span><br><span class=\"language-javascript\">    refChild.<span class=\"hljs-property\">value</span>?.<span class=\"hljs-title function_\">changeMsg</span>(str);</span><br><span class=\"language-javascript\">  &#125;;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;refChild&quot;</span> /&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;changeMsg(&#x27;change msg&#x27;)&quot;</span>&gt;</span>change msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"依赖注入-provide-x2F-inject\"><a href=\"#依赖注入-provide-x2F-inject\" class=\"headerlink\" title=\"依赖注入 provide &#x2F; inject\"></a>依赖注入 provide &#x2F; inject</h1><p>该方法就是 vue 中的依赖主人，该方法用于父子&#x2F;祖孙组件间的通信</p>\n<p>provide&#x2F;inject 是 vue 提供的两个钩子</p>\n<ul>\n<li>provide 用来发送数据或方法</li>\n<li>inject 用来接受数据或方法</li>\n</ul>\n<blockquote>\n<p>父组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> &#123; ref, provide &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Child</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/Child.vue&#x27;</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-string\">&#x27;msg&#x27;</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">changeMsg</span> = (<span class=\"hljs-params\">str</span>) =&gt; &#123;</span><br><span class=\"language-javascript\">    msg.<span class=\"hljs-property\">value</span> = str;</span><br><span class=\"language-javascript\">  &#125;;</span><br><span class=\"language-javascript\">  <span class=\"hljs-title function_\">provide</span>(<span class=\"hljs-string\">&#x27;msg&#x27;</span>, msg);</span><br><span class=\"language-javascript\">  <span class=\"hljs-title function_\">provide</span>(<span class=\"hljs-string\">&#x27;changeMsg&#x27;</span>, changeMsg);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>子组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">import</span> &#123; ref, inject &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-string\">&#x27;msg&#x27;</span>);</span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> changeMsg = <span class=\"hljs-title function_\">inject</span>(<span class=\"hljs-string\">&#x27;changeMsg&#x27;</span>);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;changeMsg(&#x27;change msg&#x27;)&quot;</span>&gt;</span>change msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"parent-x2F-children\"><a href=\"#parent-x2F-children\" class=\"headerlink\" title=\"$parent &#x2F; $children\"></a>$parent &#x2F; $children</h2><blockquote>\n<p>$parent</p>\n</blockquote>\n<blockquote>\n<p>$children（vue3 已移除）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$children</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">message</span> = <span class=\"hljs-string\">&#x27;JavaScript&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h2><h2 id=\"eventBus\"><a href=\"#eventBus\" class=\"headerlink\" title=\"eventBus\"></a>eventBus</h2><h2 id=\"mitt\"><a href=\"#mitt\" class=\"headerlink\" title=\"mitt\"></a>mitt</h2><h2 id=\"attrs-listeners\"><a href=\"#attrs-listeners\" class=\"headerlink\" title=\"$attrs $listeners\"></a>$attrs $listeners</h2>"},{"title":"computed和watch的区别","date":"2023-04-08T08:44:18.000Z","_content":"\n# watch\n\n其实它只是 this.$watch 这个 API 的一种封装：\n\n```javascript\nexport default {\n\twatch: {\n    name(newName) {...}\n\t}\n}\n\n---------------------------------------------------------\n\nexport default {\n\tcreated() {\n\t\tthis.$watch('name', newName => {...})\n\t}\n}\n```\n\n## 监听属性初始化\n\n为什么这么说，我们首先来看下初始化时 watch 属性都做了什么：\n\n```javascript\nfunction initState(vm) {  // 初始化所有状态时\n  vm._watchers = []  // 当前实例watcher集合\n  const opts = vm.$options  // 合并后的属性\n\n  ... // 其他状态初始化\n\n  if(opts.watch) {  // 如果有定义watch属性\n    initWatch(vm, opts.watch)  // 执行初始化方法\n  }\n}\n\n---------------------------------------------------------\n\nfunction initWatch (vm, watch) {  // 初始化方法\n  for (const key in watch) {  // 遍历watch内多个监听属性\n    const handler = watch[key]  // 每一个监听属性的值\n    if (Array.isArray(handler)) {  // 如果该项的值为数组\n      for (let i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i])  // 将每一项使用watcher包装\n      }\n    } else {\n      createWatcher(vm, key, handler) // 不是数组直接使用watcher\n    }\n  }\n}\n\n---------------------------------------------------------\n\nfunction createWatcher (vm, expOrFn, handler, options) {\n  if (isPlainObject(handler)) { // 如果是对象，参数移位\n    options = handler\n    handler = handler.handler\n  }\n  if (typeof handler === 'string') {  // 如果是字符串，表示为方法名\n    handler = vm[handler]  // 获取methods内的方法\n  }\n  return vm.$watch(expOrFn, handler, options)  // 封装\n}\n```\n\n> 首先初始化时，会判断并遍历 vm.$options.watch 属性，最终调用vm.$watch\n\n## 监听属性实现原理\n\n所以我们来看下$watch 的内部实现：\n\n```javascript\nVue.prototype.$watch = function(expOrFn, cb, options = {}) {\n  const vm = this\n  if (isPlainObject(cb)) {  // 如果cb是对象，当手动创建监听属性时\n    return createWatcher(vm, expOrFn, cb, options)\n  }\n\n  options.user = true  // user-watcher的标志位，传入Watcher类中\n  const watcher = new Watcher(vm, expOrFn, cb, options)  // 实例化user-watcher\n\n  if (options.immediate) {  // 立即执行\n    cb.call(vm, watcher.value)  // 以当前值立即执行一次回调函数\n  }  // watcher.value为实例化后返回的值\n\n  return function unwatchFn () {  // 返回一个函数，执行取消监听\n    watcher.teardown()\n  }\n}\n\n---------------------------------------------------------------\n\nexport default {\n  data() {\n    return {\n      name: 'cc'\n    }\n  },\n  created() {\n    this.unwatch = this.$watch('name', newName => {...})\n    this.unwatch()  // 取消监听\n  }\n}\n```\n\n> 虽然 watch 内部是使用 this.$watch，当我们还是可以通过 this.$watch 来创建监听的，所以第二个参数 cb 会出现对象的情况。\n\n- 设置标记 options.user=true,表明这是一个 user-watcher。\n- 再给 watch 设置了 immediate 属性后，会将实例化后得到的值传入回调，并立即执行一次回调函数，这也是 immediate 的实现原理。\n- 最后的返回值是一个方法，执行后可以取消对该监听属性的监听。接下来我们看看 user-watcher 是如何定义的：\n\n```javascript\nclass Watcher {\n  constructor(vm, expOrFn, cb, options) {\n    this.vm = vm\n    vm._watchers.push(this)  // 添加到当前实例的watchers内\n\n    if(options) {\n      this.deep = !!options.deep  // 是否深度监听\n      this.user = !!options.user  // 是否是user-wathcer\n      this.sync = !!options.sync  // 是否同步更新\n    }\n\n    this.active = true  // // 派发更新的标志位\n    this.cb = cb  // 回调函数\n\n    if (typeof expOrFn === 'function') {  // 如果expOrFn是函数\n      this.getter = expOrFn\n    } else {\n      this.getter = parsePath(expOrFn)  // 如果是字符串对象路径形式，返回闭包函数\n    }\n\n    ...\n\n  }\n}\n```\n\n> 当是 user-watcher 时，Watcher 内部是以上方式实例化的，通常情况下我们是使用字符串的形式创建监听属性，所以首先来看下 parsePath 方法是干什么的：\n\n```javascript\nconst bailRE = /[^\\w.$]/; // 得是对象路径形式，如info.name\n\nfunction parsePath(path) {\n  if (bailRE.test(path)) return; // 不匹配对象路径形式，再见\n\n  const segments = path.split('.'); // 按照点分割为数组\n\n  return function (obj) {\n    // 闭包返回一个函数\n    for (let i = 0; i < segments.length; i++) {\n      if (!obj) return;\n      obj = obj[segments[i]]; // 依次读取到实例下对象末端的值\n    }\n    return obj;\n  };\n}\n```\n\n> parsePath 方法最终返回一个闭包方法，此时 Watcher 类中的 this.getter 就是一个函数了，再执行 this.get()方法时会将 this.vm 传入到闭包内，补全 Watcher 其他的逻辑：\n\n```javascript\nclass Watcher {\n  constructor(vm, expOrFn, cb, options) {\n\n    ...\n    this.getter = parsePath(expOrFn)  // 返回的方法\n\n    this.value = this.get()  // 执行get\n  }\n\n  get() {\n    pushTarget(this)  // 将当前user-watcher实例赋值给Dep.target，读取时收集它\n\n    let value = this.getter.call(this.vm, this.vm)  // 将vm实例传给闭包，进行读取操作\n\n    if (this.deep) {  // 如果有定义deep属性\n      traverse(value)  // 进行深度监听\n    }\n\n    popTarget()\n    return value  // 返回闭包读取到的值，参数immediate使用的就是这里的值\n  }\n\n  ...\n\n}\n```\n\n> 因为之前初始化已经将状态已经全部都代理到了 this 下，所以读取 this 下的属性即可，比如：\n\n```javascript\nexport default {\n  data() {  // data的初始化先与watch\n    return {\n      info: {\n        name: 'cc'\n      }\n    }\n  },\n  created() {\n    this.$watch('info.name', newName => {...})  // 何况手动创建\n  }\n}\n```\n\n> 首先读取 this 下的 info 属性，然后读取 info 下的 name 属性。大家注意，这里我们使用了读取这个动词，所以会执行之前包装 data 响应式数据的 get 方法进行依赖收集，将依赖收集到读取到的属性的 dep 里，不过收集的是 user-watcher，get 方法最后返回闭包读取到的值。\n\n> 之后就是当 info.name 属性被重新赋值时，走派发更新的流程，我们这里把和 render-watcher 不同之处做单独的说明，派发更新会执行 Watcher 内的 update 方法内：\n\n```javascript\nclass Watcher {\n  constructor(vm, expOrFn, cb, options) {\n    ...\n  }\n\n  update() {  // 执行派发更新\n    if(this.sync) {  // 如果有设置sync为true\n      this.run()  // 不走nextTick队列，直接执行\n    } else {\n      queueWatcher(this)  // 否则加入队列，异步执行run()\n    }\n  }\n\n  run() {\n    if (this.active) {\n      this.getAndInvoke(this.cb)  // 传入回调函数\n    }\n  }\n\n  getAndInvoke(cb) {\n    const value = this.get()  // 重新求值\n\n    if(value !== this.value || isObject(value) || this.deep) {\n      const oldValue = this.value  // 缓存之前的值\n      this.value = value  // 新值\n      if(this.user) {  // 如果是user-watcher\n        cb.call(this.vm, value, oldValue)  // 在回调内传入新值和旧值\n      }\n    }\n  }\n}\n```\n\n> 其实这里的 sync 属性已经没在官网做说明了，不过我们看到源码中还是保留了相关代码。接下来我们看到为什么 watch 的回调内可以得到新值和旧值的原理，因为 cb.call(this.vm, value, oldValue)这句代码的原因，内部将新值和旧值传给了回调函数。\n\n```javascript\n// watch监听属性示例：\nexport default {  // App组件\n  data() {\n    return {\n      name: 'cc'\n    }\n  },\n  watch: {\n    name(newName, oldName) {...}  // 派发新值和旧值给回调\n  },\n  mounted() {\n    setTimeout(() => {\n      this.name = 'ww'  // 触发name的set\n    }, 1000)\n  }\n}\n```\n\n## 监听属性的 deep 深度监听原理\n\n之前的 get 方法内有说明，如果有 deep 属性，则执行 traverse 方法：\n\n```javascript\nconst seenObjects = new Set(); // 不重复添加\n\nfunction traverse(val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse(val, seen) {\n  let i, keys;\n  const isA = Array.isArray(val); // val是否是数组\n\n  if (\n    (!isA && !isObject(val)) || // 如果不是array和object\n    Object.isFrozen(val) || // 或者是已经冻结对象\n    val instanceof VNode\n  ) {\n    // 或者是VNode实例\n    return; // 再见\n  }\n\n  if (val.__ob__) {\n    // 只有object和array才有__ob__属性\n    const depId = val.__ob__.dep.id; // 手动依赖收集器的id\n    if (seen.has(depId)) {\n      // 已经有收集过\n      return; // 再见\n    }\n    seen.add(depId); // 没有被收集，添加\n  }\n\n  if (isA) {\n    // 是array\n    i = val.length;\n    while (i--) {\n      _traverse(val[i], seen); // 递归触发每一项的get进行依赖收集\n    }\n  } else {\n    // 是object\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) {\n      _traverse(val[keys[i]], seen); // 递归触发子属性的get进行依赖收集\n    }\n  }\n}\n```\n\n> 看着还挺复杂，简单来说 deep 的实现原理就是递归的触发数组或对象的 get 进行依赖收集，因为只有数组和对象才有**ob**属性，也就是我们第七章说明的手动依赖管理器，将它们的依赖收集到 Observer 类里的 dep 内，完成 deep 深度监听。\n\n## 总结\n\n> 这里说明了为什么 watch 和 this.$watch 的实现是一致的，以及简单解释它的原理就是为需要观察的数据创建并收集 user-watcher，当数据改变时通知到 user-watcher 将新值和旧值传递给用户自己定义的回调函数。最后分析了定义 watch 时会被使用到的三个参数：sync、immediate、deep 它们的实现原理。简单说明它们的实现原理就是：sync 是不将 watcher 加入到 nextTick 队列而同步的更新、immediate 是立即以得到的值执行一次回调函数、deep 是递归的对它的子值进行依赖收集。\n\n# computed\n\n计算属性不是 API，但它是 Watcher 类,也是最复杂的一种实例化的使用。\n\n分析计算属性为何可以做到当依赖发生变化时才会重新计算，否则数据被缓存。\n\n计算属性的值也可以是对象，这个对象需要传入 get 和 set 方法\n\n```javascript\nexport default {\n  computed: {\n    newName: {  // 不分析这种了~\n      get() {...},  // 内部会采用get属性为计算属性的值\n      set() {...}\n    }\n  }\n}\n```\n\n## 计算属性初始化\n\n```javascript\nfunction initState(vm) {  // 初始化所有状态时\n  vm._watchers = []  // 当前实例watcher集合\n  const opts = vm.$options  // 合并后的属性\n\n  ... // 其他状态初始化\n\n  if(opts.computed) {  // 如果有定义计算属性\n    initComputed(vm, opts.computed)  // 进行初始化\n  }\n  ...\n}\n\n---------------------------------------------------------------------------\n\nfunction initComputed(vm, computed) {\n  const watchers = vm._computedWatchers = Object.create(null) // 创建一个纯净对象\n\n  for(const key in computed) {\n    const getter = computed[key]  // computed每项对应的回调函数\n\n    watchers[key] = new Watcher(vm, getter, noop, {lazy: true})  // 实例化computed-watcher\n\n    ...\n\n  }\n}\n```\n\n## 计算属性实现原理\n\n> 这里还是按照惯例，将定义的 computed 属性的每一项使用 Watcher 类进行实例化，不过这里是按照 computed-watcher 的形式，来看下如何实例化的：\n\n```javascript\nclass Watcher {\n  constructor(vm, expOrFn, cb, options) {\n    this.vm = vm;\n    this._watchers.push(this);\n\n    if (options) {\n      this.lazy = !!options.lazy; // 表示是computed\n    }\n\n    this.dirty = this.lazy; // dirty为标记位，表示是否对computed计算\n\n    this.getter = expOrFn; // computed的回调函数\n\n    this.value = undefined;\n  }\n}\n```\n\n> 这里的 App 组件在执行 extend 创建子组件的构造函数时，已经将 key 挂载到 vm 的原型中了，不过之前也是执行的 defineComputed 方法，所以不妨碍我们看它做了什么：\n\n```javascript\nfunction defineComputed(target, key) {\n  ...\n  Object.defineProperty(target, key, {\n    enumerable: true,\n    configurable: true,\n    get: createComputedGetter(key),\n    set: noop\n  })\n}\n```\n\n> 这个方法的作用就是让 computed 成为一个响应式数据，并定义它的 get 属性，也就是说当页面执行渲染访问到 computed 时，才会触发 get 然后执行 createComputedGetter 方法，所以之前的点到为止再这里会续上，看下 get 方法是怎么定义的：\n\n```javascript\nfunction createComputedGetter (key) { // 高阶函数\n  return function () {  // 返回函数\n    const watcher = this._computedWatchers && this._computedWatchers[key]\n    // 原来this还可以这样用，得到key对应的computed-watcher\n\n    if (watcher) {\n      if (watcher.dirty) {  // 在实例化watcher时为true，表示需要计算\n        watcher.evaluate()  // 进行计算属性的求值\n      }\n      if (Dep.target) {  // 当前的watcher，这里是页面渲染触发的这个方法，所以为render-watcher\n        watcher.depend()  // 收集当前watcher\n      }\n      return watcher.value  // 返回求到的值或之前缓存的值\n    }\n  }\n}\n\n------------------------------------------------------------------------------------\n\nclass Watcher {\n  ...\n\n  evaluate () {\n    this.value = this.get()  //  计算属性求值\n    this.dirty = false  // 表示计算属性已经计算，不需要再计算\n  }\n\n  depend () {\n    let i = this.deps.length  // deps内是计算属性内能访问到的响应式数据的dep的数组集合\n    while (i--) {\n      this.deps[i].depend()  // 让每个dep收集当前的render-watcher\n    }\n  }\n}\n```\n\n> 这里的变量 watcher 就是之前 computed 对应的 computed-watcher 实例，接下来会执行 Watcher 类专门为计算属性定义的两个方法，在执行 evaluate 方法进行求值的过程中又会触发 computed 内可以访问到的响应式数据的 get，它们会将当前的 computed-watcher 作为依赖收集到自己的 dep 里，计算完毕之后将 dirty 置为 false，表示已经计算过了。\n\n> 然后执行 depend 让计算属性内的响应式数据订阅当前的 render-watcher，所以 computed 内的响应式数据会收集 computed-watcher 和 render-watcher 两个 watcher，当 computed 内的状态发生变更触发 set 后，首先通知 computed 需要进行重新计算，然后通知到视图执行渲染，再渲染中会访问到 computed 计算后的值，最后渲染到页面。\n\n> 当 computed 内的响应式数据变更后触发的通知：\n\n```javascript\nclass Watcher {\n  ...\n  update() {  // 当computed内的响应式数据触发set后\n    if(this.lazy) {\n      this.diray = true  // 通知computed需要重新计算了\n    }\n    ...\n  }\n}\n```\n\n> 最后还是以一个示例结合流程图来帮大家理清楚这里的逻辑：\n\n```javascript\nexport default {\n  data() {\n    return {\n      manName: 'cc',\n      womanName: 'ww'\n    };\n  },\n  computed: {\n    newName() {\n      return this.manName + ':' + this.womanName;\n    }\n  },\n  methods: {\n    changeName() {\n      this.manName = 'ss';\n    }\n  }\n};\n```\n\n## 总结\n\n> 为什么计算属性有缓存功能？因为当计算属性经过计算后，内部的标志位会表明已经计算过了，再次访问时会直接读取计算后的值；为什么计算属性内的响应式数据发生变更后，计算属性会重新计算？因为内部的响应式数据会收集 computed-watcher，变更后通知计算属性要进行计算，也会通知页面重新渲染，渲染时会读取到重新计算后的值。\n\n[查看原文](https://juejin.cn/post/6844903926819454983#heading-0)\n","source":"_posts/computed和watch的区别.md","raw":"---\ntitle: computed和watch的区别\ndate: 2023-04-08 16:44:18\ncategories: [面试题]\ntags: [Vue]\n---\n\n# watch\n\n其实它只是 this.$watch 这个 API 的一种封装：\n\n```javascript\nexport default {\n\twatch: {\n    name(newName) {...}\n\t}\n}\n\n---------------------------------------------------------\n\nexport default {\n\tcreated() {\n\t\tthis.$watch('name', newName => {...})\n\t}\n}\n```\n\n## 监听属性初始化\n\n为什么这么说，我们首先来看下初始化时 watch 属性都做了什么：\n\n```javascript\nfunction initState(vm) {  // 初始化所有状态时\n  vm._watchers = []  // 当前实例watcher集合\n  const opts = vm.$options  // 合并后的属性\n\n  ... // 其他状态初始化\n\n  if(opts.watch) {  // 如果有定义watch属性\n    initWatch(vm, opts.watch)  // 执行初始化方法\n  }\n}\n\n---------------------------------------------------------\n\nfunction initWatch (vm, watch) {  // 初始化方法\n  for (const key in watch) {  // 遍历watch内多个监听属性\n    const handler = watch[key]  // 每一个监听属性的值\n    if (Array.isArray(handler)) {  // 如果该项的值为数组\n      for (let i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i])  // 将每一项使用watcher包装\n      }\n    } else {\n      createWatcher(vm, key, handler) // 不是数组直接使用watcher\n    }\n  }\n}\n\n---------------------------------------------------------\n\nfunction createWatcher (vm, expOrFn, handler, options) {\n  if (isPlainObject(handler)) { // 如果是对象，参数移位\n    options = handler\n    handler = handler.handler\n  }\n  if (typeof handler === 'string') {  // 如果是字符串，表示为方法名\n    handler = vm[handler]  // 获取methods内的方法\n  }\n  return vm.$watch(expOrFn, handler, options)  // 封装\n}\n```\n\n> 首先初始化时，会判断并遍历 vm.$options.watch 属性，最终调用vm.$watch\n\n## 监听属性实现原理\n\n所以我们来看下$watch 的内部实现：\n\n```javascript\nVue.prototype.$watch = function(expOrFn, cb, options = {}) {\n  const vm = this\n  if (isPlainObject(cb)) {  // 如果cb是对象，当手动创建监听属性时\n    return createWatcher(vm, expOrFn, cb, options)\n  }\n\n  options.user = true  // user-watcher的标志位，传入Watcher类中\n  const watcher = new Watcher(vm, expOrFn, cb, options)  // 实例化user-watcher\n\n  if (options.immediate) {  // 立即执行\n    cb.call(vm, watcher.value)  // 以当前值立即执行一次回调函数\n  }  // watcher.value为实例化后返回的值\n\n  return function unwatchFn () {  // 返回一个函数，执行取消监听\n    watcher.teardown()\n  }\n}\n\n---------------------------------------------------------------\n\nexport default {\n  data() {\n    return {\n      name: 'cc'\n    }\n  },\n  created() {\n    this.unwatch = this.$watch('name', newName => {...})\n    this.unwatch()  // 取消监听\n  }\n}\n```\n\n> 虽然 watch 内部是使用 this.$watch，当我们还是可以通过 this.$watch 来创建监听的，所以第二个参数 cb 会出现对象的情况。\n\n- 设置标记 options.user=true,表明这是一个 user-watcher。\n- 再给 watch 设置了 immediate 属性后，会将实例化后得到的值传入回调，并立即执行一次回调函数，这也是 immediate 的实现原理。\n- 最后的返回值是一个方法，执行后可以取消对该监听属性的监听。接下来我们看看 user-watcher 是如何定义的：\n\n```javascript\nclass Watcher {\n  constructor(vm, expOrFn, cb, options) {\n    this.vm = vm\n    vm._watchers.push(this)  // 添加到当前实例的watchers内\n\n    if(options) {\n      this.deep = !!options.deep  // 是否深度监听\n      this.user = !!options.user  // 是否是user-wathcer\n      this.sync = !!options.sync  // 是否同步更新\n    }\n\n    this.active = true  // // 派发更新的标志位\n    this.cb = cb  // 回调函数\n\n    if (typeof expOrFn === 'function') {  // 如果expOrFn是函数\n      this.getter = expOrFn\n    } else {\n      this.getter = parsePath(expOrFn)  // 如果是字符串对象路径形式，返回闭包函数\n    }\n\n    ...\n\n  }\n}\n```\n\n> 当是 user-watcher 时，Watcher 内部是以上方式实例化的，通常情况下我们是使用字符串的形式创建监听属性，所以首先来看下 parsePath 方法是干什么的：\n\n```javascript\nconst bailRE = /[^\\w.$]/; // 得是对象路径形式，如info.name\n\nfunction parsePath(path) {\n  if (bailRE.test(path)) return; // 不匹配对象路径形式，再见\n\n  const segments = path.split('.'); // 按照点分割为数组\n\n  return function (obj) {\n    // 闭包返回一个函数\n    for (let i = 0; i < segments.length; i++) {\n      if (!obj) return;\n      obj = obj[segments[i]]; // 依次读取到实例下对象末端的值\n    }\n    return obj;\n  };\n}\n```\n\n> parsePath 方法最终返回一个闭包方法，此时 Watcher 类中的 this.getter 就是一个函数了，再执行 this.get()方法时会将 this.vm 传入到闭包内，补全 Watcher 其他的逻辑：\n\n```javascript\nclass Watcher {\n  constructor(vm, expOrFn, cb, options) {\n\n    ...\n    this.getter = parsePath(expOrFn)  // 返回的方法\n\n    this.value = this.get()  // 执行get\n  }\n\n  get() {\n    pushTarget(this)  // 将当前user-watcher实例赋值给Dep.target，读取时收集它\n\n    let value = this.getter.call(this.vm, this.vm)  // 将vm实例传给闭包，进行读取操作\n\n    if (this.deep) {  // 如果有定义deep属性\n      traverse(value)  // 进行深度监听\n    }\n\n    popTarget()\n    return value  // 返回闭包读取到的值，参数immediate使用的就是这里的值\n  }\n\n  ...\n\n}\n```\n\n> 因为之前初始化已经将状态已经全部都代理到了 this 下，所以读取 this 下的属性即可，比如：\n\n```javascript\nexport default {\n  data() {  // data的初始化先与watch\n    return {\n      info: {\n        name: 'cc'\n      }\n    }\n  },\n  created() {\n    this.$watch('info.name', newName => {...})  // 何况手动创建\n  }\n}\n```\n\n> 首先读取 this 下的 info 属性，然后读取 info 下的 name 属性。大家注意，这里我们使用了读取这个动词，所以会执行之前包装 data 响应式数据的 get 方法进行依赖收集，将依赖收集到读取到的属性的 dep 里，不过收集的是 user-watcher，get 方法最后返回闭包读取到的值。\n\n> 之后就是当 info.name 属性被重新赋值时，走派发更新的流程，我们这里把和 render-watcher 不同之处做单独的说明，派发更新会执行 Watcher 内的 update 方法内：\n\n```javascript\nclass Watcher {\n  constructor(vm, expOrFn, cb, options) {\n    ...\n  }\n\n  update() {  // 执行派发更新\n    if(this.sync) {  // 如果有设置sync为true\n      this.run()  // 不走nextTick队列，直接执行\n    } else {\n      queueWatcher(this)  // 否则加入队列，异步执行run()\n    }\n  }\n\n  run() {\n    if (this.active) {\n      this.getAndInvoke(this.cb)  // 传入回调函数\n    }\n  }\n\n  getAndInvoke(cb) {\n    const value = this.get()  // 重新求值\n\n    if(value !== this.value || isObject(value) || this.deep) {\n      const oldValue = this.value  // 缓存之前的值\n      this.value = value  // 新值\n      if(this.user) {  // 如果是user-watcher\n        cb.call(this.vm, value, oldValue)  // 在回调内传入新值和旧值\n      }\n    }\n  }\n}\n```\n\n> 其实这里的 sync 属性已经没在官网做说明了，不过我们看到源码中还是保留了相关代码。接下来我们看到为什么 watch 的回调内可以得到新值和旧值的原理，因为 cb.call(this.vm, value, oldValue)这句代码的原因，内部将新值和旧值传给了回调函数。\n\n```javascript\n// watch监听属性示例：\nexport default {  // App组件\n  data() {\n    return {\n      name: 'cc'\n    }\n  },\n  watch: {\n    name(newName, oldName) {...}  // 派发新值和旧值给回调\n  },\n  mounted() {\n    setTimeout(() => {\n      this.name = 'ww'  // 触发name的set\n    }, 1000)\n  }\n}\n```\n\n## 监听属性的 deep 深度监听原理\n\n之前的 get 方法内有说明，如果有 deep 属性，则执行 traverse 方法：\n\n```javascript\nconst seenObjects = new Set(); // 不重复添加\n\nfunction traverse(val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse(val, seen) {\n  let i, keys;\n  const isA = Array.isArray(val); // val是否是数组\n\n  if (\n    (!isA && !isObject(val)) || // 如果不是array和object\n    Object.isFrozen(val) || // 或者是已经冻结对象\n    val instanceof VNode\n  ) {\n    // 或者是VNode实例\n    return; // 再见\n  }\n\n  if (val.__ob__) {\n    // 只有object和array才有__ob__属性\n    const depId = val.__ob__.dep.id; // 手动依赖收集器的id\n    if (seen.has(depId)) {\n      // 已经有收集过\n      return; // 再见\n    }\n    seen.add(depId); // 没有被收集，添加\n  }\n\n  if (isA) {\n    // 是array\n    i = val.length;\n    while (i--) {\n      _traverse(val[i], seen); // 递归触发每一项的get进行依赖收集\n    }\n  } else {\n    // 是object\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) {\n      _traverse(val[keys[i]], seen); // 递归触发子属性的get进行依赖收集\n    }\n  }\n}\n```\n\n> 看着还挺复杂，简单来说 deep 的实现原理就是递归的触发数组或对象的 get 进行依赖收集，因为只有数组和对象才有**ob**属性，也就是我们第七章说明的手动依赖管理器，将它们的依赖收集到 Observer 类里的 dep 内，完成 deep 深度监听。\n\n## 总结\n\n> 这里说明了为什么 watch 和 this.$watch 的实现是一致的，以及简单解释它的原理就是为需要观察的数据创建并收集 user-watcher，当数据改变时通知到 user-watcher 将新值和旧值传递给用户自己定义的回调函数。最后分析了定义 watch 时会被使用到的三个参数：sync、immediate、deep 它们的实现原理。简单说明它们的实现原理就是：sync 是不将 watcher 加入到 nextTick 队列而同步的更新、immediate 是立即以得到的值执行一次回调函数、deep 是递归的对它的子值进行依赖收集。\n\n# computed\n\n计算属性不是 API，但它是 Watcher 类,也是最复杂的一种实例化的使用。\n\n分析计算属性为何可以做到当依赖发生变化时才会重新计算，否则数据被缓存。\n\n计算属性的值也可以是对象，这个对象需要传入 get 和 set 方法\n\n```javascript\nexport default {\n  computed: {\n    newName: {  // 不分析这种了~\n      get() {...},  // 内部会采用get属性为计算属性的值\n      set() {...}\n    }\n  }\n}\n```\n\n## 计算属性初始化\n\n```javascript\nfunction initState(vm) {  // 初始化所有状态时\n  vm._watchers = []  // 当前实例watcher集合\n  const opts = vm.$options  // 合并后的属性\n\n  ... // 其他状态初始化\n\n  if(opts.computed) {  // 如果有定义计算属性\n    initComputed(vm, opts.computed)  // 进行初始化\n  }\n  ...\n}\n\n---------------------------------------------------------------------------\n\nfunction initComputed(vm, computed) {\n  const watchers = vm._computedWatchers = Object.create(null) // 创建一个纯净对象\n\n  for(const key in computed) {\n    const getter = computed[key]  // computed每项对应的回调函数\n\n    watchers[key] = new Watcher(vm, getter, noop, {lazy: true})  // 实例化computed-watcher\n\n    ...\n\n  }\n}\n```\n\n## 计算属性实现原理\n\n> 这里还是按照惯例，将定义的 computed 属性的每一项使用 Watcher 类进行实例化，不过这里是按照 computed-watcher 的形式，来看下如何实例化的：\n\n```javascript\nclass Watcher {\n  constructor(vm, expOrFn, cb, options) {\n    this.vm = vm;\n    this._watchers.push(this);\n\n    if (options) {\n      this.lazy = !!options.lazy; // 表示是computed\n    }\n\n    this.dirty = this.lazy; // dirty为标记位，表示是否对computed计算\n\n    this.getter = expOrFn; // computed的回调函数\n\n    this.value = undefined;\n  }\n}\n```\n\n> 这里的 App 组件在执行 extend 创建子组件的构造函数时，已经将 key 挂载到 vm 的原型中了，不过之前也是执行的 defineComputed 方法，所以不妨碍我们看它做了什么：\n\n```javascript\nfunction defineComputed(target, key) {\n  ...\n  Object.defineProperty(target, key, {\n    enumerable: true,\n    configurable: true,\n    get: createComputedGetter(key),\n    set: noop\n  })\n}\n```\n\n> 这个方法的作用就是让 computed 成为一个响应式数据，并定义它的 get 属性，也就是说当页面执行渲染访问到 computed 时，才会触发 get 然后执行 createComputedGetter 方法，所以之前的点到为止再这里会续上，看下 get 方法是怎么定义的：\n\n```javascript\nfunction createComputedGetter (key) { // 高阶函数\n  return function () {  // 返回函数\n    const watcher = this._computedWatchers && this._computedWatchers[key]\n    // 原来this还可以这样用，得到key对应的computed-watcher\n\n    if (watcher) {\n      if (watcher.dirty) {  // 在实例化watcher时为true，表示需要计算\n        watcher.evaluate()  // 进行计算属性的求值\n      }\n      if (Dep.target) {  // 当前的watcher，这里是页面渲染触发的这个方法，所以为render-watcher\n        watcher.depend()  // 收集当前watcher\n      }\n      return watcher.value  // 返回求到的值或之前缓存的值\n    }\n  }\n}\n\n------------------------------------------------------------------------------------\n\nclass Watcher {\n  ...\n\n  evaluate () {\n    this.value = this.get()  //  计算属性求值\n    this.dirty = false  // 表示计算属性已经计算，不需要再计算\n  }\n\n  depend () {\n    let i = this.deps.length  // deps内是计算属性内能访问到的响应式数据的dep的数组集合\n    while (i--) {\n      this.deps[i].depend()  // 让每个dep收集当前的render-watcher\n    }\n  }\n}\n```\n\n> 这里的变量 watcher 就是之前 computed 对应的 computed-watcher 实例，接下来会执行 Watcher 类专门为计算属性定义的两个方法，在执行 evaluate 方法进行求值的过程中又会触发 computed 内可以访问到的响应式数据的 get，它们会将当前的 computed-watcher 作为依赖收集到自己的 dep 里，计算完毕之后将 dirty 置为 false，表示已经计算过了。\n\n> 然后执行 depend 让计算属性内的响应式数据订阅当前的 render-watcher，所以 computed 内的响应式数据会收集 computed-watcher 和 render-watcher 两个 watcher，当 computed 内的状态发生变更触发 set 后，首先通知 computed 需要进行重新计算，然后通知到视图执行渲染，再渲染中会访问到 computed 计算后的值，最后渲染到页面。\n\n> 当 computed 内的响应式数据变更后触发的通知：\n\n```javascript\nclass Watcher {\n  ...\n  update() {  // 当computed内的响应式数据触发set后\n    if(this.lazy) {\n      this.diray = true  // 通知computed需要重新计算了\n    }\n    ...\n  }\n}\n```\n\n> 最后还是以一个示例结合流程图来帮大家理清楚这里的逻辑：\n\n```javascript\nexport default {\n  data() {\n    return {\n      manName: 'cc',\n      womanName: 'ww'\n    };\n  },\n  computed: {\n    newName() {\n      return this.manName + ':' + this.womanName;\n    }\n  },\n  methods: {\n    changeName() {\n      this.manName = 'ss';\n    }\n  }\n};\n```\n\n## 总结\n\n> 为什么计算属性有缓存功能？因为当计算属性经过计算后，内部的标志位会表明已经计算过了，再次访问时会直接读取计算后的值；为什么计算属性内的响应式数据发生变更后，计算属性会重新计算？因为内部的响应式数据会收集 computed-watcher，变更后通知计算属性要进行计算，也会通知页面重新渲染，渲染时会读取到重新计算后的值。\n\n[查看原文](https://juejin.cn/post/6844903926819454983#heading-0)\n","slug":"computed和watch的区别","published":1,"updated":"2023-04-08T10:16:39.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg7v9ngh000jtfxcay9g9pr5","content":"<h1 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h1><p>其实它只是 this.$watch 这个 API 的一种封装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>\t<span class=\"hljs-attr\">watch</span>: &#123;<br>    <span class=\"hljs-title function_\">name</span>(<span class=\"hljs-params\">newName</span>) &#123;...&#125;<br>\t&#125;<br>&#125;<br><br>---------------------------------------------------------<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>\t<span class=\"hljs-title function_\">created</span>(<span class=\"hljs-params\"></span>) &#123;<br>\t\t<span class=\"hljs-variable language_\">this</span>.$watch(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">newName</span> =&gt;</span> &#123;...&#125;)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"监听属性初始化\"><a href=\"#监听属性初始化\" class=\"headerlink\" title=\"监听属性初始化\"></a>监听属性初始化</h2><p>为什么这么说，我们首先来看下初始化时 watch 属性都做了什么：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initState</span>(<span class=\"hljs-params\">vm</span>) &#123;  <span class=\"hljs-comment\">// 初始化所有状态时</span><br>  vm.<span class=\"hljs-property\">_watchers</span> = []  <span class=\"hljs-comment\">// 当前实例watcher集合</span><br>  <span class=\"hljs-keyword\">const</span> opts = vm.<span class=\"hljs-property\">$options</span>  <span class=\"hljs-comment\">// 合并后的属性</span><br><br>  ... <span class=\"hljs-comment\">// 其他状态初始化</span><br><br>  <span class=\"hljs-keyword\">if</span>(opts.<span class=\"hljs-property\">watch</span>) &#123;  <span class=\"hljs-comment\">// 如果有定义watch属性</span><br>    <span class=\"hljs-title function_\">initWatch</span>(vm, opts.<span class=\"hljs-property\">watch</span>)  <span class=\"hljs-comment\">// 执行初始化方法</span><br>  &#125;<br>&#125;<br><br>---------------------------------------------------------<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initWatch</span> (vm, watch) &#123;  <span class=\"hljs-comment\">// 初始化方法</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> watch) &#123;  <span class=\"hljs-comment\">// 遍历watch内多个监听属性</span><br>    <span class=\"hljs-keyword\">const</span> handler = watch[key]  <span class=\"hljs-comment\">// 每一个监听属性的值</span><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(handler)) &#123;  <span class=\"hljs-comment\">// 如果该项的值为数组</span><br>      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; handler.<span class=\"hljs-property\">length</span>; i++) &#123;<br>        <span class=\"hljs-title function_\">createWatcher</span>(vm, key, handler[i])  <span class=\"hljs-comment\">// 将每一项使用watcher包装</span><br>      &#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-title function_\">createWatcher</span>(vm, key, handler) <span class=\"hljs-comment\">// 不是数组直接使用watcher</span><br>    &#125;<br>  &#125;<br>&#125;<br><br>---------------------------------------------------------<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createWatcher</span> (vm, expOrFn, handler, options) &#123;<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isPlainObject</span>(handler)) &#123; <span class=\"hljs-comment\">// 如果是对象，参数移位</span><br>    options = handler<br>    handler = handler.<span class=\"hljs-property\">handler</span><br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> handler === <span class=\"hljs-string\">&#x27;string&#x27;</span>) &#123;  <span class=\"hljs-comment\">// 如果是字符串，表示为方法名</span><br>    handler = vm[handler]  <span class=\"hljs-comment\">// 获取methods内的方法</span><br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> vm.$watch(expOrFn, handler, options)  <span class=\"hljs-comment\">// 封装</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>首先初始化时，会判断并遍历 vm.$options.watch 属性，最终调用vm.$watch</p>\n</blockquote>\n<h2 id=\"监听属性实现原理\"><a href=\"#监听属性实现原理\" class=\"headerlink\" title=\"监听属性实现原理\"></a>监听属性实现原理</h2><p>所以我们来看下$watch 的内部实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">$watch</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">expOrFn, cb, options = &#123;&#125;</span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> vm = <span class=\"hljs-variable language_\">this</span><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isPlainObject</span>(cb)) &#123;  <span class=\"hljs-comment\">// 如果cb是对象，当手动创建监听属性时</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">createWatcher</span>(vm, expOrFn, cb, options)<br>  &#125;<br><br>  options.<span class=\"hljs-property\">user</span> = <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">// user-watcher的标志位，传入Watcher类中</span><br>  <span class=\"hljs-keyword\">const</span> watcher = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watcher</span>(vm, expOrFn, cb, options)  <span class=\"hljs-comment\">// 实例化user-watcher</span><br><br>  <span class=\"hljs-keyword\">if</span> (options.<span class=\"hljs-property\">immediate</span>) &#123;  <span class=\"hljs-comment\">// 立即执行</span><br>    cb.<span class=\"hljs-title function_\">call</span>(vm, watcher.<span class=\"hljs-property\">value</span>)  <span class=\"hljs-comment\">// 以当前值立即执行一次回调函数</span><br>  &#125;  <span class=\"hljs-comment\">// watcher.value为实例化后返回的值</span><br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">unwatchFn</span> () &#123;  <span class=\"hljs-comment\">// 返回一个函数，执行取消监听</span><br>    watcher.<span class=\"hljs-title function_\">teardown</span>()<br>  &#125;<br>&#125;<br><br>---------------------------------------------------------------<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;cc&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-title function_\">created</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">unwatch</span> = <span class=\"hljs-variable language_\">this</span>.$watch(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">newName</span> =&gt;</span> &#123;...&#125;)<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">unwatch</span>()  <span class=\"hljs-comment\">// 取消监听</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>虽然 watch 内部是使用 this.$watch，当我们还是可以通过 this.$watch 来创建监听的，所以第二个参数 cb 会出现对象的情况。</p>\n</blockquote>\n<ul>\n<li>设置标记 options.user&#x3D;true,表明这是一个 user-watcher。</li>\n<li>再给 watch 设置了 immediate 属性后，会将实例化后得到的值传入回调，并立即执行一次回调函数，这也是 immediate 的实现原理。</li>\n<li>最后的返回值是一个方法，执行后可以取消对该监听属性的监听。接下来我们看看 user-watcher 是如何定义的：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Watcher</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">vm, expOrFn, cb, options</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span> = vm<br>    vm.<span class=\"hljs-property\">_watchers</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">this</span>)  <span class=\"hljs-comment\">// 添加到当前实例的watchers内</span><br><br>    <span class=\"hljs-keyword\">if</span>(options) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">deep</span> = !!options.<span class=\"hljs-property\">deep</span>  <span class=\"hljs-comment\">// 是否深度监听</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">user</span> = !!options.<span class=\"hljs-property\">user</span>  <span class=\"hljs-comment\">// 是否是user-wathcer</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sync</span> = !!options.<span class=\"hljs-property\">sync</span>  <span class=\"hljs-comment\">// 是否同步更新</span><br>    &#125;<br><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">active</span> = <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">// // 派发更新的标志位</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cb</span> = cb  <span class=\"hljs-comment\">// 回调函数</span><br><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> expOrFn === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123;  <span class=\"hljs-comment\">// 如果expOrFn是函数</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getter</span> = expOrFn<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getter</span> = <span class=\"hljs-title function_\">parsePath</span>(expOrFn)  <span class=\"hljs-comment\">// 如果是字符串对象路径形式，返回闭包函数</span><br>    &#125;<br><br>    ...<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当是 user-watcher 时，Watcher 内部是以上方式实例化的，通常情况下我们是使用字符串的形式创建监听属性，所以首先来看下 parsePath 方法是干什么的：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> bailRE = <span class=\"hljs-regexp\">/[^\\w.$]/</span>; <span class=\"hljs-comment\">// 得是对象路径形式，如info.name</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">parsePath</span>(<span class=\"hljs-params\">path</span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (bailRE.<span class=\"hljs-title function_\">test</span>(path)) <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// 不匹配对象路径形式，再见</span><br><br>  <span class=\"hljs-keyword\">const</span> segments = path.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;.&#x27;</span>); <span class=\"hljs-comment\">// 按照点分割为数组</span><br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">obj</span>) &#123;<br>    <span class=\"hljs-comment\">// 闭包返回一个函数</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; segments.<span class=\"hljs-property\">length</span>; i++) &#123;<br>      <span class=\"hljs-keyword\">if</span> (!obj) <span class=\"hljs-keyword\">return</span>;<br>      obj = obj[segments[i]]; <span class=\"hljs-comment\">// 依次读取到实例下对象末端的值</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> obj;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>parsePath 方法最终返回一个闭包方法，此时 Watcher 类中的 this.getter 就是一个函数了，再执行 this.get()方法时会将 this.vm 传入到闭包内，补全 Watcher 其他的逻辑：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Watcher</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">vm, expOrFn, cb, options</span>) &#123;<br><br>    ...<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getter</span> = <span class=\"hljs-title function_\">parsePath</span>(expOrFn)  <span class=\"hljs-comment\">// 返回的方法</span><br><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>()  <span class=\"hljs-comment\">// 执行get</span><br>  &#125;<br><br>  <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-title function_\">pushTarget</span>(<span class=\"hljs-variable language_\">this</span>)  <span class=\"hljs-comment\">// 将当前user-watcher实例赋值给Dep.target，读取时收集它</span><br><br>    <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getter</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span>)  <span class=\"hljs-comment\">// 将vm实例传给闭包，进行读取操作</span><br><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">deep</span>) &#123;  <span class=\"hljs-comment\">// 如果有定义deep属性</span><br>      <span class=\"hljs-title function_\">traverse</span>(value)  <span class=\"hljs-comment\">// 进行深度监听</span><br>    &#125;<br><br>    <span class=\"hljs-title function_\">popTarget</span>()<br>    <span class=\"hljs-keyword\">return</span> value  <span class=\"hljs-comment\">// 返回闭包读取到的值，参数immediate使用的就是这里的值</span><br>  &#125;<br><br>  ...<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>因为之前初始化已经将状态已经全部都代理到了 this 下，所以读取 this 下的属性即可，比如：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>) &#123;  <span class=\"hljs-comment\">// data的初始化先与watch</span><br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">info</span>: &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;cc&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-title function_\">created</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.$watch(<span class=\"hljs-string\">&#x27;info.name&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">newName</span> =&gt;</span> &#123;...&#125;)  <span class=\"hljs-comment\">// 何况手动创建</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>首先读取 this 下的 info 属性，然后读取 info 下的 name 属性。大家注意，这里我们使用了读取这个动词，所以会执行之前包装 data 响应式数据的 get 方法进行依赖收集，将依赖收集到读取到的属性的 dep 里，不过收集的是 user-watcher，get 方法最后返回闭包读取到的值。</p>\n</blockquote>\n<blockquote>\n<p>之后就是当 info.name 属性被重新赋值时，走派发更新的流程，我们这里把和 render-watcher 不同之处做单独的说明，派发更新会执行 Watcher 内的 update 方法内：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Watcher</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">vm, expOrFn, cb, options</span>) &#123;<br>    ...<br>  &#125;<br><br>  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\"></span>) &#123;  <span class=\"hljs-comment\">// 执行派发更新</span><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sync</span>) &#123;  <span class=\"hljs-comment\">// 如果有设置sync为true</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">run</span>()  <span class=\"hljs-comment\">// 不走nextTick队列，直接执行</span><br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-title function_\">queueWatcher</span>(<span class=\"hljs-variable language_\">this</span>)  <span class=\"hljs-comment\">// 否则加入队列，异步执行run()</span><br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">active</span>) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getAndInvoke</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cb</span>)  <span class=\"hljs-comment\">// 传入回调函数</span><br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-title function_\">getAndInvoke</span>(<span class=\"hljs-params\">cb</span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>()  <span class=\"hljs-comment\">// 重新求值</span><br><br>    <span class=\"hljs-keyword\">if</span>(value !== <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> || <span class=\"hljs-title function_\">isObject</span>(value) || <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">deep</span>) &#123;<br>      <span class=\"hljs-keyword\">const</span> oldValue = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>  <span class=\"hljs-comment\">// 缓存之前的值</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = value  <span class=\"hljs-comment\">// 新值</span><br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">user</span>) &#123;  <span class=\"hljs-comment\">// 如果是user-watcher</span><br>        cb.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span>, value, oldValue)  <span class=\"hljs-comment\">// 在回调内传入新值和旧值</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其实这里的 sync 属性已经没在官网做说明了，不过我们看到源码中还是保留了相关代码。接下来我们看到为什么 watch 的回调内可以得到新值和旧值的原理，因为 cb.call(this.vm, value, oldValue)这句代码的原因，内部将新值和旧值传给了回调函数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// watch监听属性示例：</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;  <span class=\"hljs-comment\">// App组件</span><br>  <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;cc&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">watch</span>: &#123;<br>    <span class=\"hljs-title function_\">name</span>(<span class=\"hljs-params\">newName, oldName</span>) &#123;...&#125;  <span class=\"hljs-comment\">// 派发新值和旧值给回调</span><br>  &#125;,<br>  <span class=\"hljs-title function_\">mounted</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;ww&#x27;</span>  <span class=\"hljs-comment\">// 触发name的set</span><br>    &#125;, <span class=\"hljs-number\">1000</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"监听属性的-deep-深度监听原理\"><a href=\"#监听属性的-deep-深度监听原理\" class=\"headerlink\" title=\"监听属性的 deep 深度监听原理\"></a>监听属性的 deep 深度监听原理</h2><p>之前的 get 方法内有说明，如果有 deep 属性，则执行 traverse 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> seenObjects = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>(); <span class=\"hljs-comment\">// 不重复添加</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">traverse</span>(<span class=\"hljs-params\">val</span>) &#123;<br>  <span class=\"hljs-title function_\">_traverse</span>(val, seenObjects);<br>  seenObjects.<span class=\"hljs-title function_\">clear</span>();<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">_traverse</span>(<span class=\"hljs-params\">val, seen</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> i, keys;<br>  <span class=\"hljs-keyword\">const</span> isA = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(val); <span class=\"hljs-comment\">// val是否是数组</span><br><br>  <span class=\"hljs-keyword\">if</span> (<br>    (!isA &amp;&amp; !<span class=\"hljs-title function_\">isObject</span>(val)) || <span class=\"hljs-comment\">// 如果不是array和object</span><br>    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">isFrozen</span>(val) || <span class=\"hljs-comment\">// 或者是已经冻结对象</span><br>    val <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">VNode</span><br>  ) &#123;<br>    <span class=\"hljs-comment\">// 或者是VNode实例</span><br>    <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// 再见</span><br>  &#125;<br><br>  <span class=\"hljs-keyword\">if</span> (val.<span class=\"hljs-property\">__ob__</span>) &#123;<br>    <span class=\"hljs-comment\">// 只有object和array才有__ob__属性</span><br>    <span class=\"hljs-keyword\">const</span> depId = val.<span class=\"hljs-property\">__ob__</span>.<span class=\"hljs-property\">dep</span>.<span class=\"hljs-property\">id</span>; <span class=\"hljs-comment\">// 手动依赖收集器的id</span><br>    <span class=\"hljs-keyword\">if</span> (seen.<span class=\"hljs-title function_\">has</span>(depId)) &#123;<br>      <span class=\"hljs-comment\">// 已经有收集过</span><br>      <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// 再见</span><br>    &#125;<br>    seen.<span class=\"hljs-title function_\">add</span>(depId); <span class=\"hljs-comment\">// 没有被收集，添加</span><br>  &#125;<br><br>  <span class=\"hljs-keyword\">if</span> (isA) &#123;<br>    <span class=\"hljs-comment\">// 是array</span><br>    i = val.<span class=\"hljs-property\">length</span>;<br>    <span class=\"hljs-keyword\">while</span> (i--) &#123;<br>      <span class=\"hljs-title function_\">_traverse</span>(val[i], seen); <span class=\"hljs-comment\">// 递归触发每一项的get进行依赖收集</span><br>    &#125;<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// 是object</span><br>    keys = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(val);<br>    i = keys.<span class=\"hljs-property\">length</span>;<br>    <span class=\"hljs-keyword\">while</span> (i--) &#123;<br>      <span class=\"hljs-title function_\">_traverse</span>(val[keys[i]], seen); <span class=\"hljs-comment\">// 递归触发子属性的get进行依赖收集</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>看着还挺复杂，简单来说 deep 的实现原理就是递归的触发数组或对象的 get 进行依赖收集，因为只有数组和对象才有<strong>ob</strong>属性，也就是我们第七章说明的手动依赖管理器，将它们的依赖收集到 Observer 类里的 dep 内，完成 deep 深度监听。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>这里说明了为什么 watch 和 this.$watch 的实现是一致的，以及简单解释它的原理就是为需要观察的数据创建并收集 user-watcher，当数据改变时通知到 user-watcher 将新值和旧值传递给用户自己定义的回调函数。最后分析了定义 watch 时会被使用到的三个参数：sync、immediate、deep 它们的实现原理。简单说明它们的实现原理就是：sync 是不将 watcher 加入到 nextTick 队列而同步的更新、immediate 是立即以得到的值执行一次回调函数、deep 是递归的对它的子值进行依赖收集。</p>\n</blockquote>\n<h1 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h1><p>计算属性不是 API，但它是 Watcher 类,也是最复杂的一种实例化的使用。</p>\n<p>分析计算属性为何可以做到当依赖发生变化时才会重新计算，否则数据被缓存。</p>\n<p>计算属性的值也可以是对象，这个对象需要传入 get 和 set 方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-attr\">computed</span>: &#123;<br>    <span class=\"hljs-attr\">newName</span>: &#123;  <span class=\"hljs-comment\">// 不分析这种了~</span><br>      <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\"></span>) &#123;...&#125;,  <span class=\"hljs-comment\">// 内部会采用get属性为计算属性的值</span><br>      <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\"></span>) &#123;...&#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"计算属性初始化\"><a href=\"#计算属性初始化\" class=\"headerlink\" title=\"计算属性初始化\"></a>计算属性初始化</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initState</span>(<span class=\"hljs-params\">vm</span>) &#123;  <span class=\"hljs-comment\">// 初始化所有状态时</span><br>  vm.<span class=\"hljs-property\">_watchers</span> = []  <span class=\"hljs-comment\">// 当前实例watcher集合</span><br>  <span class=\"hljs-keyword\">const</span> opts = vm.<span class=\"hljs-property\">$options</span>  <span class=\"hljs-comment\">// 合并后的属性</span><br><br>  ... <span class=\"hljs-comment\">// 其他状态初始化</span><br><br>  <span class=\"hljs-keyword\">if</span>(opts.<span class=\"hljs-property\">computed</span>) &#123;  <span class=\"hljs-comment\">// 如果有定义计算属性</span><br>    <span class=\"hljs-title function_\">initComputed</span>(vm, opts.<span class=\"hljs-property\">computed</span>)  <span class=\"hljs-comment\">// 进行初始化</span><br>  &#125;<br>  ...<br>&#125;<br><br>---------------------------------------------------------------------------<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initComputed</span>(<span class=\"hljs-params\">vm, computed</span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> watchers = vm.<span class=\"hljs-property\">_computedWatchers</span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// 创建一个纯净对象</span><br><br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> computed) &#123;<br>    <span class=\"hljs-keyword\">const</span> getter = computed[key]  <span class=\"hljs-comment\">// computed每项对应的回调函数</span><br><br>    watchers[key] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watcher</span>(vm, getter, noop, &#123;<span class=\"hljs-attr\">lazy</span>: <span class=\"hljs-literal\">true</span>&#125;)  <span class=\"hljs-comment\">// 实例化computed-watcher</span><br><br>    ...<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"计算属性实现原理\"><a href=\"#计算属性实现原理\" class=\"headerlink\" title=\"计算属性实现原理\"></a>计算属性实现原理</h2><blockquote>\n<p>这里还是按照惯例，将定义的 computed 属性的每一项使用 Watcher 类进行实例化，不过这里是按照 computed-watcher 的形式，来看下如何实例化的：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Watcher</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">vm, expOrFn, cb, options</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span> = vm;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_watchers</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">this</span>);<br><br>    <span class=\"hljs-keyword\">if</span> (options) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">lazy</span> = !!options.<span class=\"hljs-property\">lazy</span>; <span class=\"hljs-comment\">// 表示是computed</span><br>    &#125;<br><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dirty</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">lazy</span>; <span class=\"hljs-comment\">// dirty为标记位，表示是否对computed计算</span><br><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getter</span> = expOrFn; <span class=\"hljs-comment\">// computed的回调函数</span><br><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = <span class=\"hljs-literal\">undefined</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里的 App 组件在执行 extend 创建子组件的构造函数时，已经将 key 挂载到 vm 的原型中了，不过之前也是执行的 defineComputed 方法，所以不妨碍我们看它做了什么：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">defineComputed</span>(<span class=\"hljs-params\">target, key</span>) &#123;<br>  ...<br>  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(target, key, &#123;<br>    <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-title function_\">createComputedGetter</span>(key),<br>    <span class=\"hljs-attr\">set</span>: noop<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这个方法的作用就是让 computed 成为一个响应式数据，并定义它的 get 属性，也就是说当页面执行渲染访问到 computed 时，才会触发 get 然后执行 createComputedGetter 方法，所以之前的点到为止再这里会续上，看下 get 方法是怎么定义的：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createComputedGetter</span> (key) &#123; <span class=\"hljs-comment\">// 高阶函数</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;  <span class=\"hljs-comment\">// 返回函数</span><br>    <span class=\"hljs-keyword\">const</span> watcher = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_computedWatchers</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_computedWatchers</span>[key]<br>    <span class=\"hljs-comment\">// 原来this还可以这样用，得到key对应的computed-watcher</span><br><br>    <span class=\"hljs-keyword\">if</span> (watcher) &#123;<br>      <span class=\"hljs-keyword\">if</span> (watcher.<span class=\"hljs-property\">dirty</span>) &#123;  <span class=\"hljs-comment\">// 在实例化watcher时为true，表示需要计算</span><br>        watcher.evaluate()  <span class=\"hljs-comment\">// 进行计算属性的求值</span><br>      &#125;<br>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Dep</span>.<span class=\"hljs-property\">target</span>) &#123;  <span class=\"hljs-comment\">// 当前的watcher，这里是页面渲染触发的这个方法，所以为render-watcher</span><br>        watcher.<span class=\"hljs-title function_\">depend</span>()  <span class=\"hljs-comment\">// 收集当前watcher</span><br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> watcher.<span class=\"hljs-property\">value</span>  <span class=\"hljs-comment\">// 返回求到的值或之前缓存的值</span><br>    &#125;<br>  &#125;<br>&#125;<br><br>------------------------------------------------------------------------------------<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Watcher</span> &#123;<br>  ...<br><br>  evaluate () &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>()  <span class=\"hljs-comment\">//  计算属性求值</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dirty</span> = <span class=\"hljs-literal\">false</span>  <span class=\"hljs-comment\">// 表示计算属性已经计算，不需要再计算</span><br>  &#125;<br><br>  depend () &#123;<br>    <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">deps</span>.<span class=\"hljs-property\">length</span>  <span class=\"hljs-comment\">// deps内是计算属性内能访问到的响应式数据的dep的数组集合</span><br>    <span class=\"hljs-keyword\">while</span> (i--) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">deps</span>[i].<span class=\"hljs-title function_\">depend</span>()  <span class=\"hljs-comment\">// 让每个dep收集当前的render-watcher</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里的变量 watcher 就是之前 computed 对应的 computed-watcher 实例，接下来会执行 Watcher 类专门为计算属性定义的两个方法，在执行 evaluate 方法进行求值的过程中又会触发 computed 内可以访问到的响应式数据的 get，它们会将当前的 computed-watcher 作为依赖收集到自己的 dep 里，计算完毕之后将 dirty 置为 false，表示已经计算过了。</p>\n</blockquote>\n<blockquote>\n<p>然后执行 depend 让计算属性内的响应式数据订阅当前的 render-watcher，所以 computed 内的响应式数据会收集 computed-watcher 和 render-watcher 两个 watcher，当 computed 内的状态发生变更触发 set 后，首先通知 computed 需要进行重新计算，然后通知到视图执行渲染，再渲染中会访问到 computed 计算后的值，最后渲染到页面。</p>\n</blockquote>\n<blockquote>\n<p>当 computed 内的响应式数据变更后触发的通知：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Watcher</span> &#123;<br>  ...<br>  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\"></span>) &#123;  <span class=\"hljs-comment\">// 当computed内的响应式数据触发set后</span><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">lazy</span>) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">diray</span> = <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">// 通知computed需要重新计算了</span><br>    &#125;<br>    ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>最后还是以一个示例结合流程图来帮大家理清楚这里的逻辑：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">manName</span>: <span class=\"hljs-string\">&#x27;cc&#x27;</span>,<br>      <span class=\"hljs-attr\">womanName</span>: <span class=\"hljs-string\">&#x27;ww&#x27;</span><br>    &#125;;<br>  &#125;,<br>  <span class=\"hljs-attr\">computed</span>: &#123;<br>    <span class=\"hljs-title function_\">newName</span>(<span class=\"hljs-params\"></span>) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">manName</span> + <span class=\"hljs-string\">&#x27;:&#x27;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">womanName</span>;<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">methods</span>: &#123;<br>    <span class=\"hljs-title function_\">changeName</span>(<span class=\"hljs-params\"></span>) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">manName</span> = <span class=\"hljs-string\">&#x27;ss&#x27;</span>;<br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>为什么计算属性有缓存功能？因为当计算属性经过计算后，内部的标志位会表明已经计算过了，再次访问时会直接读取计算后的值；为什么计算属性内的响应式数据发生变更后，计算属性会重新计算？因为内部的响应式数据会收集 computed-watcher，变更后通知计算属性要进行计算，也会通知页面重新渲染，渲染时会读取到重新计算后的值。</p>\n</blockquote>\n<p><a href=\"https://juejin.cn/post/6844903926819454983#heading-0\">查看原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h1><p>其实它只是 this.$watch 这个 API 的一种封装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>\t<span class=\"hljs-attr\">watch</span>: &#123;<br>    <span class=\"hljs-title function_\">name</span>(<span class=\"hljs-params\">newName</span>) &#123;...&#125;<br>\t&#125;<br>&#125;<br><br>---------------------------------------------------------<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>\t<span class=\"hljs-title function_\">created</span>(<span class=\"hljs-params\"></span>) &#123;<br>\t\t<span class=\"hljs-variable language_\">this</span>.$watch(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">newName</span> =&gt;</span> &#123;...&#125;)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"监听属性初始化\"><a href=\"#监听属性初始化\" class=\"headerlink\" title=\"监听属性初始化\"></a>监听属性初始化</h2><p>为什么这么说，我们首先来看下初始化时 watch 属性都做了什么：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initState</span>(<span class=\"hljs-params\">vm</span>) &#123;  <span class=\"hljs-comment\">// 初始化所有状态时</span><br>  vm.<span class=\"hljs-property\">_watchers</span> = []  <span class=\"hljs-comment\">// 当前实例watcher集合</span><br>  <span class=\"hljs-keyword\">const</span> opts = vm.<span class=\"hljs-property\">$options</span>  <span class=\"hljs-comment\">// 合并后的属性</span><br><br>  ... <span class=\"hljs-comment\">// 其他状态初始化</span><br><br>  <span class=\"hljs-keyword\">if</span>(opts.<span class=\"hljs-property\">watch</span>) &#123;  <span class=\"hljs-comment\">// 如果有定义watch属性</span><br>    <span class=\"hljs-title function_\">initWatch</span>(vm, opts.<span class=\"hljs-property\">watch</span>)  <span class=\"hljs-comment\">// 执行初始化方法</span><br>  &#125;<br>&#125;<br><br>---------------------------------------------------------<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initWatch</span> (vm, watch) &#123;  <span class=\"hljs-comment\">// 初始化方法</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> watch) &#123;  <span class=\"hljs-comment\">// 遍历watch内多个监听属性</span><br>    <span class=\"hljs-keyword\">const</span> handler = watch[key]  <span class=\"hljs-comment\">// 每一个监听属性的值</span><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(handler)) &#123;  <span class=\"hljs-comment\">// 如果该项的值为数组</span><br>      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; handler.<span class=\"hljs-property\">length</span>; i++) &#123;<br>        <span class=\"hljs-title function_\">createWatcher</span>(vm, key, handler[i])  <span class=\"hljs-comment\">// 将每一项使用watcher包装</span><br>      &#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-title function_\">createWatcher</span>(vm, key, handler) <span class=\"hljs-comment\">// 不是数组直接使用watcher</span><br>    &#125;<br>  &#125;<br>&#125;<br><br>---------------------------------------------------------<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createWatcher</span> (vm, expOrFn, handler, options) &#123;<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isPlainObject</span>(handler)) &#123; <span class=\"hljs-comment\">// 如果是对象，参数移位</span><br>    options = handler<br>    handler = handler.<span class=\"hljs-property\">handler</span><br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> handler === <span class=\"hljs-string\">&#x27;string&#x27;</span>) &#123;  <span class=\"hljs-comment\">// 如果是字符串，表示为方法名</span><br>    handler = vm[handler]  <span class=\"hljs-comment\">// 获取methods内的方法</span><br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> vm.$watch(expOrFn, handler, options)  <span class=\"hljs-comment\">// 封装</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>首先初始化时，会判断并遍历 vm.$options.watch 属性，最终调用vm.$watch</p>\n</blockquote>\n<h2 id=\"监听属性实现原理\"><a href=\"#监听属性实现原理\" class=\"headerlink\" title=\"监听属性实现原理\"></a>监听属性实现原理</h2><p>所以我们来看下$watch 的内部实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">$watch</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">expOrFn, cb, options = &#123;&#125;</span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> vm = <span class=\"hljs-variable language_\">this</span><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isPlainObject</span>(cb)) &#123;  <span class=\"hljs-comment\">// 如果cb是对象，当手动创建监听属性时</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">createWatcher</span>(vm, expOrFn, cb, options)<br>  &#125;<br><br>  options.<span class=\"hljs-property\">user</span> = <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">// user-watcher的标志位，传入Watcher类中</span><br>  <span class=\"hljs-keyword\">const</span> watcher = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watcher</span>(vm, expOrFn, cb, options)  <span class=\"hljs-comment\">// 实例化user-watcher</span><br><br>  <span class=\"hljs-keyword\">if</span> (options.<span class=\"hljs-property\">immediate</span>) &#123;  <span class=\"hljs-comment\">// 立即执行</span><br>    cb.<span class=\"hljs-title function_\">call</span>(vm, watcher.<span class=\"hljs-property\">value</span>)  <span class=\"hljs-comment\">// 以当前值立即执行一次回调函数</span><br>  &#125;  <span class=\"hljs-comment\">// watcher.value为实例化后返回的值</span><br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">unwatchFn</span> () &#123;  <span class=\"hljs-comment\">// 返回一个函数，执行取消监听</span><br>    watcher.<span class=\"hljs-title function_\">teardown</span>()<br>  &#125;<br>&#125;<br><br>---------------------------------------------------------------<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;cc&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-title function_\">created</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">unwatch</span> = <span class=\"hljs-variable language_\">this</span>.$watch(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">newName</span> =&gt;</span> &#123;...&#125;)<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">unwatch</span>()  <span class=\"hljs-comment\">// 取消监听</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>虽然 watch 内部是使用 this.$watch，当我们还是可以通过 this.$watch 来创建监听的，所以第二个参数 cb 会出现对象的情况。</p>\n</blockquote>\n<ul>\n<li>设置标记 options.user&#x3D;true,表明这是一个 user-watcher。</li>\n<li>再给 watch 设置了 immediate 属性后，会将实例化后得到的值传入回调，并立即执行一次回调函数，这也是 immediate 的实现原理。</li>\n<li>最后的返回值是一个方法，执行后可以取消对该监听属性的监听。接下来我们看看 user-watcher 是如何定义的：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Watcher</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">vm, expOrFn, cb, options</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span> = vm<br>    vm.<span class=\"hljs-property\">_watchers</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">this</span>)  <span class=\"hljs-comment\">// 添加到当前实例的watchers内</span><br><br>    <span class=\"hljs-keyword\">if</span>(options) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">deep</span> = !!options.<span class=\"hljs-property\">deep</span>  <span class=\"hljs-comment\">// 是否深度监听</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">user</span> = !!options.<span class=\"hljs-property\">user</span>  <span class=\"hljs-comment\">// 是否是user-wathcer</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sync</span> = !!options.<span class=\"hljs-property\">sync</span>  <span class=\"hljs-comment\">// 是否同步更新</span><br>    &#125;<br><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">active</span> = <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">// // 派发更新的标志位</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cb</span> = cb  <span class=\"hljs-comment\">// 回调函数</span><br><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> expOrFn === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123;  <span class=\"hljs-comment\">// 如果expOrFn是函数</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getter</span> = expOrFn<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getter</span> = <span class=\"hljs-title function_\">parsePath</span>(expOrFn)  <span class=\"hljs-comment\">// 如果是字符串对象路径形式，返回闭包函数</span><br>    &#125;<br><br>    ...<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当是 user-watcher 时，Watcher 内部是以上方式实例化的，通常情况下我们是使用字符串的形式创建监听属性，所以首先来看下 parsePath 方法是干什么的：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> bailRE = <span class=\"hljs-regexp\">/[^\\w.$]/</span>; <span class=\"hljs-comment\">// 得是对象路径形式，如info.name</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">parsePath</span>(<span class=\"hljs-params\">path</span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (bailRE.<span class=\"hljs-title function_\">test</span>(path)) <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// 不匹配对象路径形式，再见</span><br><br>  <span class=\"hljs-keyword\">const</span> segments = path.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;.&#x27;</span>); <span class=\"hljs-comment\">// 按照点分割为数组</span><br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">obj</span>) &#123;<br>    <span class=\"hljs-comment\">// 闭包返回一个函数</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; segments.<span class=\"hljs-property\">length</span>; i++) &#123;<br>      <span class=\"hljs-keyword\">if</span> (!obj) <span class=\"hljs-keyword\">return</span>;<br>      obj = obj[segments[i]]; <span class=\"hljs-comment\">// 依次读取到实例下对象末端的值</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> obj;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>parsePath 方法最终返回一个闭包方法，此时 Watcher 类中的 this.getter 就是一个函数了，再执行 this.get()方法时会将 this.vm 传入到闭包内，补全 Watcher 其他的逻辑：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Watcher</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">vm, expOrFn, cb, options</span>) &#123;<br><br>    ...<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getter</span> = <span class=\"hljs-title function_\">parsePath</span>(expOrFn)  <span class=\"hljs-comment\">// 返回的方法</span><br><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>()  <span class=\"hljs-comment\">// 执行get</span><br>  &#125;<br><br>  <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-title function_\">pushTarget</span>(<span class=\"hljs-variable language_\">this</span>)  <span class=\"hljs-comment\">// 将当前user-watcher实例赋值给Dep.target，读取时收集它</span><br><br>    <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getter</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span>)  <span class=\"hljs-comment\">// 将vm实例传给闭包，进行读取操作</span><br><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">deep</span>) &#123;  <span class=\"hljs-comment\">// 如果有定义deep属性</span><br>      <span class=\"hljs-title function_\">traverse</span>(value)  <span class=\"hljs-comment\">// 进行深度监听</span><br>    &#125;<br><br>    <span class=\"hljs-title function_\">popTarget</span>()<br>    <span class=\"hljs-keyword\">return</span> value  <span class=\"hljs-comment\">// 返回闭包读取到的值，参数immediate使用的就是这里的值</span><br>  &#125;<br><br>  ...<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>因为之前初始化已经将状态已经全部都代理到了 this 下，所以读取 this 下的属性即可，比如：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>) &#123;  <span class=\"hljs-comment\">// data的初始化先与watch</span><br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">info</span>: &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;cc&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-title function_\">created</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.$watch(<span class=\"hljs-string\">&#x27;info.name&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">newName</span> =&gt;</span> &#123;...&#125;)  <span class=\"hljs-comment\">// 何况手动创建</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>首先读取 this 下的 info 属性，然后读取 info 下的 name 属性。大家注意，这里我们使用了读取这个动词，所以会执行之前包装 data 响应式数据的 get 方法进行依赖收集，将依赖收集到读取到的属性的 dep 里，不过收集的是 user-watcher，get 方法最后返回闭包读取到的值。</p>\n</blockquote>\n<blockquote>\n<p>之后就是当 info.name 属性被重新赋值时，走派发更新的流程，我们这里把和 render-watcher 不同之处做单独的说明，派发更新会执行 Watcher 内的 update 方法内：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Watcher</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">vm, expOrFn, cb, options</span>) &#123;<br>    ...<br>  &#125;<br><br>  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\"></span>) &#123;  <span class=\"hljs-comment\">// 执行派发更新</span><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sync</span>) &#123;  <span class=\"hljs-comment\">// 如果有设置sync为true</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">run</span>()  <span class=\"hljs-comment\">// 不走nextTick队列，直接执行</span><br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-title function_\">queueWatcher</span>(<span class=\"hljs-variable language_\">this</span>)  <span class=\"hljs-comment\">// 否则加入队列，异步执行run()</span><br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">active</span>) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getAndInvoke</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cb</span>)  <span class=\"hljs-comment\">// 传入回调函数</span><br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-title function_\">getAndInvoke</span>(<span class=\"hljs-params\">cb</span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>()  <span class=\"hljs-comment\">// 重新求值</span><br><br>    <span class=\"hljs-keyword\">if</span>(value !== <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> || <span class=\"hljs-title function_\">isObject</span>(value) || <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">deep</span>) &#123;<br>      <span class=\"hljs-keyword\">const</span> oldValue = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>  <span class=\"hljs-comment\">// 缓存之前的值</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = value  <span class=\"hljs-comment\">// 新值</span><br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">user</span>) &#123;  <span class=\"hljs-comment\">// 如果是user-watcher</span><br>        cb.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span>, value, oldValue)  <span class=\"hljs-comment\">// 在回调内传入新值和旧值</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其实这里的 sync 属性已经没在官网做说明了，不过我们看到源码中还是保留了相关代码。接下来我们看到为什么 watch 的回调内可以得到新值和旧值的原理，因为 cb.call(this.vm, value, oldValue)这句代码的原因，内部将新值和旧值传给了回调函数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// watch监听属性示例：</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;  <span class=\"hljs-comment\">// App组件</span><br>  <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;cc&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">watch</span>: &#123;<br>    <span class=\"hljs-title function_\">name</span>(<span class=\"hljs-params\">newName, oldName</span>) &#123;...&#125;  <span class=\"hljs-comment\">// 派发新值和旧值给回调</span><br>  &#125;,<br>  <span class=\"hljs-title function_\">mounted</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;ww&#x27;</span>  <span class=\"hljs-comment\">// 触发name的set</span><br>    &#125;, <span class=\"hljs-number\">1000</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"监听属性的-deep-深度监听原理\"><a href=\"#监听属性的-deep-深度监听原理\" class=\"headerlink\" title=\"监听属性的 deep 深度监听原理\"></a>监听属性的 deep 深度监听原理</h2><p>之前的 get 方法内有说明，如果有 deep 属性，则执行 traverse 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> seenObjects = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>(); <span class=\"hljs-comment\">// 不重复添加</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">traverse</span>(<span class=\"hljs-params\">val</span>) &#123;<br>  <span class=\"hljs-title function_\">_traverse</span>(val, seenObjects);<br>  seenObjects.<span class=\"hljs-title function_\">clear</span>();<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">_traverse</span>(<span class=\"hljs-params\">val, seen</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> i, keys;<br>  <span class=\"hljs-keyword\">const</span> isA = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(val); <span class=\"hljs-comment\">// val是否是数组</span><br><br>  <span class=\"hljs-keyword\">if</span> (<br>    (!isA &amp;&amp; !<span class=\"hljs-title function_\">isObject</span>(val)) || <span class=\"hljs-comment\">// 如果不是array和object</span><br>    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">isFrozen</span>(val) || <span class=\"hljs-comment\">// 或者是已经冻结对象</span><br>    val <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">VNode</span><br>  ) &#123;<br>    <span class=\"hljs-comment\">// 或者是VNode实例</span><br>    <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// 再见</span><br>  &#125;<br><br>  <span class=\"hljs-keyword\">if</span> (val.<span class=\"hljs-property\">__ob__</span>) &#123;<br>    <span class=\"hljs-comment\">// 只有object和array才有__ob__属性</span><br>    <span class=\"hljs-keyword\">const</span> depId = val.<span class=\"hljs-property\">__ob__</span>.<span class=\"hljs-property\">dep</span>.<span class=\"hljs-property\">id</span>; <span class=\"hljs-comment\">// 手动依赖收集器的id</span><br>    <span class=\"hljs-keyword\">if</span> (seen.<span class=\"hljs-title function_\">has</span>(depId)) &#123;<br>      <span class=\"hljs-comment\">// 已经有收集过</span><br>      <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// 再见</span><br>    &#125;<br>    seen.<span class=\"hljs-title function_\">add</span>(depId); <span class=\"hljs-comment\">// 没有被收集，添加</span><br>  &#125;<br><br>  <span class=\"hljs-keyword\">if</span> (isA) &#123;<br>    <span class=\"hljs-comment\">// 是array</span><br>    i = val.<span class=\"hljs-property\">length</span>;<br>    <span class=\"hljs-keyword\">while</span> (i--) &#123;<br>      <span class=\"hljs-title function_\">_traverse</span>(val[i], seen); <span class=\"hljs-comment\">// 递归触发每一项的get进行依赖收集</span><br>    &#125;<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// 是object</span><br>    keys = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(val);<br>    i = keys.<span class=\"hljs-property\">length</span>;<br>    <span class=\"hljs-keyword\">while</span> (i--) &#123;<br>      <span class=\"hljs-title function_\">_traverse</span>(val[keys[i]], seen); <span class=\"hljs-comment\">// 递归触发子属性的get进行依赖收集</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>看着还挺复杂，简单来说 deep 的实现原理就是递归的触发数组或对象的 get 进行依赖收集，因为只有数组和对象才有<strong>ob</strong>属性，也就是我们第七章说明的手动依赖管理器，将它们的依赖收集到 Observer 类里的 dep 内，完成 deep 深度监听。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>这里说明了为什么 watch 和 this.$watch 的实现是一致的，以及简单解释它的原理就是为需要观察的数据创建并收集 user-watcher，当数据改变时通知到 user-watcher 将新值和旧值传递给用户自己定义的回调函数。最后分析了定义 watch 时会被使用到的三个参数：sync、immediate、deep 它们的实现原理。简单说明它们的实现原理就是：sync 是不将 watcher 加入到 nextTick 队列而同步的更新、immediate 是立即以得到的值执行一次回调函数、deep 是递归的对它的子值进行依赖收集。</p>\n</blockquote>\n<h1 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h1><p>计算属性不是 API，但它是 Watcher 类,也是最复杂的一种实例化的使用。</p>\n<p>分析计算属性为何可以做到当依赖发生变化时才会重新计算，否则数据被缓存。</p>\n<p>计算属性的值也可以是对象，这个对象需要传入 get 和 set 方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-attr\">computed</span>: &#123;<br>    <span class=\"hljs-attr\">newName</span>: &#123;  <span class=\"hljs-comment\">// 不分析这种了~</span><br>      <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\"></span>) &#123;...&#125;,  <span class=\"hljs-comment\">// 内部会采用get属性为计算属性的值</span><br>      <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\"></span>) &#123;...&#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"计算属性初始化\"><a href=\"#计算属性初始化\" class=\"headerlink\" title=\"计算属性初始化\"></a>计算属性初始化</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initState</span>(<span class=\"hljs-params\">vm</span>) &#123;  <span class=\"hljs-comment\">// 初始化所有状态时</span><br>  vm.<span class=\"hljs-property\">_watchers</span> = []  <span class=\"hljs-comment\">// 当前实例watcher集合</span><br>  <span class=\"hljs-keyword\">const</span> opts = vm.<span class=\"hljs-property\">$options</span>  <span class=\"hljs-comment\">// 合并后的属性</span><br><br>  ... <span class=\"hljs-comment\">// 其他状态初始化</span><br><br>  <span class=\"hljs-keyword\">if</span>(opts.<span class=\"hljs-property\">computed</span>) &#123;  <span class=\"hljs-comment\">// 如果有定义计算属性</span><br>    <span class=\"hljs-title function_\">initComputed</span>(vm, opts.<span class=\"hljs-property\">computed</span>)  <span class=\"hljs-comment\">// 进行初始化</span><br>  &#125;<br>  ...<br>&#125;<br><br>---------------------------------------------------------------------------<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initComputed</span>(<span class=\"hljs-params\">vm, computed</span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> watchers = vm.<span class=\"hljs-property\">_computedWatchers</span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// 创建一个纯净对象</span><br><br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> computed) &#123;<br>    <span class=\"hljs-keyword\">const</span> getter = computed[key]  <span class=\"hljs-comment\">// computed每项对应的回调函数</span><br><br>    watchers[key] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watcher</span>(vm, getter, noop, &#123;<span class=\"hljs-attr\">lazy</span>: <span class=\"hljs-literal\">true</span>&#125;)  <span class=\"hljs-comment\">// 实例化computed-watcher</span><br><br>    ...<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"计算属性实现原理\"><a href=\"#计算属性实现原理\" class=\"headerlink\" title=\"计算属性实现原理\"></a>计算属性实现原理</h2><blockquote>\n<p>这里还是按照惯例，将定义的 computed 属性的每一项使用 Watcher 类进行实例化，不过这里是按照 computed-watcher 的形式，来看下如何实例化的：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Watcher</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">vm, expOrFn, cb, options</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span> = vm;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_watchers</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">this</span>);<br><br>    <span class=\"hljs-keyword\">if</span> (options) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">lazy</span> = !!options.<span class=\"hljs-property\">lazy</span>; <span class=\"hljs-comment\">// 表示是computed</span><br>    &#125;<br><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dirty</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">lazy</span>; <span class=\"hljs-comment\">// dirty为标记位，表示是否对computed计算</span><br><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">getter</span> = expOrFn; <span class=\"hljs-comment\">// computed的回调函数</span><br><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = <span class=\"hljs-literal\">undefined</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里的 App 组件在执行 extend 创建子组件的构造函数时，已经将 key 挂载到 vm 的原型中了，不过之前也是执行的 defineComputed 方法，所以不妨碍我们看它做了什么：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">defineComputed</span>(<span class=\"hljs-params\">target, key</span>) &#123;<br>  ...<br>  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(target, key, &#123;<br>    <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-title function_\">createComputedGetter</span>(key),<br>    <span class=\"hljs-attr\">set</span>: noop<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这个方法的作用就是让 computed 成为一个响应式数据，并定义它的 get 属性，也就是说当页面执行渲染访问到 computed 时，才会触发 get 然后执行 createComputedGetter 方法，所以之前的点到为止再这里会续上，看下 get 方法是怎么定义的：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createComputedGetter</span> (key) &#123; <span class=\"hljs-comment\">// 高阶函数</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;  <span class=\"hljs-comment\">// 返回函数</span><br>    <span class=\"hljs-keyword\">const</span> watcher = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_computedWatchers</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_computedWatchers</span>[key]<br>    <span class=\"hljs-comment\">// 原来this还可以这样用，得到key对应的computed-watcher</span><br><br>    <span class=\"hljs-keyword\">if</span> (watcher) &#123;<br>      <span class=\"hljs-keyword\">if</span> (watcher.<span class=\"hljs-property\">dirty</span>) &#123;  <span class=\"hljs-comment\">// 在实例化watcher时为true，表示需要计算</span><br>        watcher.evaluate()  <span class=\"hljs-comment\">// 进行计算属性的求值</span><br>      &#125;<br>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Dep</span>.<span class=\"hljs-property\">target</span>) &#123;  <span class=\"hljs-comment\">// 当前的watcher，这里是页面渲染触发的这个方法，所以为render-watcher</span><br>        watcher.<span class=\"hljs-title function_\">depend</span>()  <span class=\"hljs-comment\">// 收集当前watcher</span><br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> watcher.<span class=\"hljs-property\">value</span>  <span class=\"hljs-comment\">// 返回求到的值或之前缓存的值</span><br>    &#125;<br>  &#125;<br>&#125;<br><br>------------------------------------------------------------------------------------<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Watcher</span> &#123;<br>  ...<br><br>  evaluate () &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>()  <span class=\"hljs-comment\">//  计算属性求值</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dirty</span> = <span class=\"hljs-literal\">false</span>  <span class=\"hljs-comment\">// 表示计算属性已经计算，不需要再计算</span><br>  &#125;<br><br>  depend () &#123;<br>    <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">deps</span>.<span class=\"hljs-property\">length</span>  <span class=\"hljs-comment\">// deps内是计算属性内能访问到的响应式数据的dep的数组集合</span><br>    <span class=\"hljs-keyword\">while</span> (i--) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">deps</span>[i].<span class=\"hljs-title function_\">depend</span>()  <span class=\"hljs-comment\">// 让每个dep收集当前的render-watcher</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里的变量 watcher 就是之前 computed 对应的 computed-watcher 实例，接下来会执行 Watcher 类专门为计算属性定义的两个方法，在执行 evaluate 方法进行求值的过程中又会触发 computed 内可以访问到的响应式数据的 get，它们会将当前的 computed-watcher 作为依赖收集到自己的 dep 里，计算完毕之后将 dirty 置为 false，表示已经计算过了。</p>\n</blockquote>\n<blockquote>\n<p>然后执行 depend 让计算属性内的响应式数据订阅当前的 render-watcher，所以 computed 内的响应式数据会收集 computed-watcher 和 render-watcher 两个 watcher，当 computed 内的状态发生变更触发 set 后，首先通知 computed 需要进行重新计算，然后通知到视图执行渲染，再渲染中会访问到 computed 计算后的值，最后渲染到页面。</p>\n</blockquote>\n<blockquote>\n<p>当 computed 内的响应式数据变更后触发的通知：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Watcher</span> &#123;<br>  ...<br>  <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\"></span>) &#123;  <span class=\"hljs-comment\">// 当computed内的响应式数据触发set后</span><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">lazy</span>) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">diray</span> = <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">// 通知computed需要重新计算了</span><br>    &#125;<br>    ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>最后还是以一个示例结合流程图来帮大家理清楚这里的逻辑：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">manName</span>: <span class=\"hljs-string\">&#x27;cc&#x27;</span>,<br>      <span class=\"hljs-attr\">womanName</span>: <span class=\"hljs-string\">&#x27;ww&#x27;</span><br>    &#125;;<br>  &#125;,<br>  <span class=\"hljs-attr\">computed</span>: &#123;<br>    <span class=\"hljs-title function_\">newName</span>(<span class=\"hljs-params\"></span>) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">manName</span> + <span class=\"hljs-string\">&#x27;:&#x27;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">womanName</span>;<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">methods</span>: &#123;<br>    <span class=\"hljs-title function_\">changeName</span>(<span class=\"hljs-params\"></span>) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">manName</span> = <span class=\"hljs-string\">&#x27;ss&#x27;</span>;<br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>为什么计算属性有缓存功能？因为当计算属性经过计算后，内部的标志位会表明已经计算过了，再次访问时会直接读取计算后的值；为什么计算属性内的响应式数据发生变更后，计算属性会重新计算？因为内部的响应式数据会收集 computed-watcher，变更后通知计算属性要进行计算，也会通知页面重新渲染，渲染时会读取到重新计算后的值。</p>\n</blockquote>\n<p><a href=\"https://juejin.cn/post/6844903926819454983#heading-0\">查看原文</a></p>\n"},{"title":"Hello World","date":"2022-12-31T16:00:00.000Z","hide":true,"_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2023-01-01 00:00:00\nhide: true\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2023-04-08T03:24:03.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg7v9ngi000ktfxcadvr83yj","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"双向数据绑定","date":"2023-04-07T12:00:00.000Z","_content":"\n## 什么是双向数据绑定\n\n简单来说就是数据层和视图层之间实现相互绑定\n也就是说视图发生变化数据会发生变化，同理数据发生变化视图也会发生相应的改变\n\n## 双向数据绑定的原理（MVVM）\n\n- M 数据层\n- V 视图层\n- VM 业务处理层（核心层）\n  - 监听器 Obsever 对所有数据的属性进行监听\n  - 解析器 Compiler 对每个元素节点进行解析\n\n## 如何实现双向绑定\n\n- 初始化 对 data 执行响应处理 Obsever\n- 同时对模版执行编译从 data 中获取动态数据，并初始化视图 Compiler\n- 同时定义一个更新函数和 Watcher 将来对象数据发生变化时 Watcher 会调用更新函数\n- 由于 data 的某个属性 key 在视图中可能出现多次，所以每个 key 都需要有一个 Dep 来管理多个 Watcher\n- 将来 data 中数据一旦发生变化，会首先找到对应的 Dep 通知所有的 Watcher 执行更新函数\n\n![双向数据绑定原理](/images/什么是双向数据绑定.png)\n","source":"_posts/什么是双向数据绑定.md","raw":"---\ntitle: 双向数据绑定\ndate: 2023-04-07 20:00:00\ncategories: [面试题]\ntags: [Vue]\n---\n\n## 什么是双向数据绑定\n\n简单来说就是数据层和视图层之间实现相互绑定\n也就是说视图发生变化数据会发生变化，同理数据发生变化视图也会发生相应的改变\n\n## 双向数据绑定的原理（MVVM）\n\n- M 数据层\n- V 视图层\n- VM 业务处理层（核心层）\n  - 监听器 Obsever 对所有数据的属性进行监听\n  - 解析器 Compiler 对每个元素节点进行解析\n\n## 如何实现双向绑定\n\n- 初始化 对 data 执行响应处理 Obsever\n- 同时对模版执行编译从 data 中获取动态数据，并初始化视图 Compiler\n- 同时定义一个更新函数和 Watcher 将来对象数据发生变化时 Watcher 会调用更新函数\n- 由于 data 的某个属性 key 在视图中可能出现多次，所以每个 key 都需要有一个 Dep 来管理多个 Watcher\n- 将来 data 中数据一旦发生变化，会首先找到对应的 Dep 通知所有的 Watcher 执行更新函数\n\n![双向数据绑定原理](/images/什么是双向数据绑定.png)\n","slug":"什么是双向数据绑定","published":1,"updated":"2023-04-08T04:44:41.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg7v9ngj000mtfxch119b8nu","content":"<h2 id=\"什么是双向数据绑定\"><a href=\"#什么是双向数据绑定\" class=\"headerlink\" title=\"什么是双向数据绑定\"></a>什么是双向数据绑定</h2><p>简单来说就是数据层和视图层之间实现相互绑定<br>也就是说视图发生变化数据会发生变化，同理数据发生变化视图也会发生相应的改变</p>\n<h2 id=\"双向数据绑定的原理（MVVM）\"><a href=\"#双向数据绑定的原理（MVVM）\" class=\"headerlink\" title=\"双向数据绑定的原理（MVVM）\"></a>双向数据绑定的原理（MVVM）</h2><ul>\n<li>M 数据层</li>\n<li>V 视图层</li>\n<li>VM 业务处理层（核心层）<ul>\n<li>监听器 Obsever 对所有数据的属性进行监听</li>\n<li>解析器 Compiler 对每个元素节点进行解析</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何实现双向绑定\"><a href=\"#如何实现双向绑定\" class=\"headerlink\" title=\"如何实现双向绑定\"></a>如何实现双向绑定</h2><ul>\n<li>初始化 对 data 执行响应处理 Obsever</li>\n<li>同时对模版执行编译从 data 中获取动态数据，并初始化视图 Compiler</li>\n<li>同时定义一个更新函数和 Watcher 将来对象数据发生变化时 Watcher 会调用更新函数</li>\n<li>由于 data 的某个属性 key 在视图中可能出现多次，所以每个 key 都需要有一个 Dep 来管理多个 Watcher</li>\n<li>将来 data 中数据一旦发生变化，会首先找到对应的 Dep 通知所有的 Watcher 执行更新函数</li>\n</ul>\n<p><img src=\"/xiaolanchong.githug.io/images/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A.png\" alt=\"双向数据绑定原理\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是双向数据绑定\"><a href=\"#什么是双向数据绑定\" class=\"headerlink\" title=\"什么是双向数据绑定\"></a>什么是双向数据绑定</h2><p>简单来说就是数据层和视图层之间实现相互绑定<br>也就是说视图发生变化数据会发生变化，同理数据发生变化视图也会发生相应的改变</p>\n<h2 id=\"双向数据绑定的原理（MVVM）\"><a href=\"#双向数据绑定的原理（MVVM）\" class=\"headerlink\" title=\"双向数据绑定的原理（MVVM）\"></a>双向数据绑定的原理（MVVM）</h2><ul>\n<li>M 数据层</li>\n<li>V 视图层</li>\n<li>VM 业务处理层（核心层）<ul>\n<li>监听器 Obsever 对所有数据的属性进行监听</li>\n<li>解析器 Compiler 对每个元素节点进行解析</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何实现双向绑定\"><a href=\"#如何实现双向绑定\" class=\"headerlink\" title=\"如何实现双向绑定\"></a>如何实现双向绑定</h2><ul>\n<li>初始化 对 data 执行响应处理 Obsever</li>\n<li>同时对模版执行编译从 data 中获取动态数据，并初始化视图 Compiler</li>\n<li>同时定义一个更新函数和 Watcher 将来对象数据发生变化时 Watcher 会调用更新函数</li>\n<li>由于 data 的某个属性 key 在视图中可能出现多次，所以每个 key 都需要有一个 Dep 来管理多个 Watcher</li>\n<li>将来 data 中数据一旦发生变化，会首先找到对应的 Dep 通知所有的 Watcher 执行更新函数</li>\n</ul>\n<p><img src=\"/xiaolanchong.githug.io/images/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A.png\" alt=\"双向数据绑定原理\"></p>\n"},{"title":"浏览器都做了什么","date":"2023-04-08T10:23:08.000Z","_content":"\n# 一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？\n\n## 1、解析 URL\n\n- 对 URL 进行解析 分析传输协议金和资源路径\n- 协议或主机名是否合法\n  - 是 检查 是否存在非法字符 并对其进行转义\n  - 否 内容传输给搜索引擎\n\n## 2、缓存判断\n\n- 浏览器是否存在资源缓存 是有有效\n  - 是 直接使用\n  - 否 向服务器发起新的请求\n\n## 3、DNS 解析\n\n- 获取 URL 中域名的 IP 地址\n- 用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求\n- 检查 本地 DNS 服务器 是否存在该域名的 IP 地址的缓存\n  - 是 直接使用\n  - 否 请求跟域名服务器 => 获得 负责的顶级域名服务器地址 => 请求负责的顶级域名服务器 => 获得域名的 IP 地址\n\n## 4、获取 MAC 地址\n\n## 5、TCP 三次握手\n\n- 确认客户端与服务端的接受与发送能量\n- 客户端发送 SYN 连接请求报文段和一个随机序号\n- 服务端确认连接请求 并先客户端发送一个随机序号\n- 客户端进入连接建立的状态，并向服务器发送一个 ACK 确认报文段\n- 服务端接收确认后进入连接建立转态\n- 双方的连接建立完成\n\n## 6、HTTPS 握手\n\n- 如果用的 HTTPS 协议 在通信前还存在 TLS 的第四次捂手过程\n- 客户端发送 协议本部好 随机数 加密方法\n- 服务端确认加密方法后发送 随机数 数字证书\n- 客户端确认证书后发送 随机数并加密 全部内容的 hash\n- 服务端解密随机数后发生 全部内容的 hash\n- 此时双方都有 3 个随机数\n- 加密生成秘钥\n\n## 7、发送 HTTP 请求\n\n- 服务端处理请求，返回 HTTP 报文\n\n## 8、页面渲染\n\n- 解析 HTML 文件构建 DOM 树\n- 解析 CSS 文件构建 CSSOM 树\n- 如果遇到 script 标签判断是否同步加载还是异步加载\n- DOM 树与 CSSOM 树合成渲染树进行布局\n- 布局完成后使用浏览器的 UI 接口对页面进行绘制\n\n## 9、TCP 第四次握手\n\n- 最后一步是 TCP 端口连接的第四次握手过程\n","source":"_posts/浏览器都做了什么.md","raw":"---\ntitle: 浏览器都做了什么\ndate: 2023-04-08 18:23:08\ncategories: [面试题]\ntags: [HTTP]\n---\n\n# 一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？\n\n## 1、解析 URL\n\n- 对 URL 进行解析 分析传输协议金和资源路径\n- 协议或主机名是否合法\n  - 是 检查 是否存在非法字符 并对其进行转义\n  - 否 内容传输给搜索引擎\n\n## 2、缓存判断\n\n- 浏览器是否存在资源缓存 是有有效\n  - 是 直接使用\n  - 否 向服务器发起新的请求\n\n## 3、DNS 解析\n\n- 获取 URL 中域名的 IP 地址\n- 用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求\n- 检查 本地 DNS 服务器 是否存在该域名的 IP 地址的缓存\n  - 是 直接使用\n  - 否 请求跟域名服务器 => 获得 负责的顶级域名服务器地址 => 请求负责的顶级域名服务器 => 获得域名的 IP 地址\n\n## 4、获取 MAC 地址\n\n## 5、TCP 三次握手\n\n- 确认客户端与服务端的接受与发送能量\n- 客户端发送 SYN 连接请求报文段和一个随机序号\n- 服务端确认连接请求 并先客户端发送一个随机序号\n- 客户端进入连接建立的状态，并向服务器发送一个 ACK 确认报文段\n- 服务端接收确认后进入连接建立转态\n- 双方的连接建立完成\n\n## 6、HTTPS 握手\n\n- 如果用的 HTTPS 协议 在通信前还存在 TLS 的第四次捂手过程\n- 客户端发送 协议本部好 随机数 加密方法\n- 服务端确认加密方法后发送 随机数 数字证书\n- 客户端确认证书后发送 随机数并加密 全部内容的 hash\n- 服务端解密随机数后发生 全部内容的 hash\n- 此时双方都有 3 个随机数\n- 加密生成秘钥\n\n## 7、发送 HTTP 请求\n\n- 服务端处理请求，返回 HTTP 报文\n\n## 8、页面渲染\n\n- 解析 HTML 文件构建 DOM 树\n- 解析 CSS 文件构建 CSSOM 树\n- 如果遇到 script 标签判断是否同步加载还是异步加载\n- DOM 树与 CSSOM 树合成渲染树进行布局\n- 布局完成后使用浏览器的 UI 接口对页面进行绘制\n\n## 9、TCP 第四次握手\n\n- 最后一步是 TCP 端口连接的第四次握手过程\n","slug":"浏览器都做了什么","published":1,"updated":"2023-04-08T10:28:20.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg7v9ngj000ntfxc0yb34slx","content":"<h1 id=\"一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？\"><a href=\"#一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？\" class=\"headerlink\" title=\"一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？\"></a>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</h1><h2 id=\"1、解析-URL\"><a href=\"#1、解析-URL\" class=\"headerlink\" title=\"1、解析 URL\"></a>1、解析 URL</h2><ul>\n<li>对 URL 进行解析 分析传输协议金和资源路径</li>\n<li>协议或主机名是否合法<ul>\n<li>是 检查 是否存在非法字符 并对其进行转义</li>\n<li>否 内容传输给搜索引擎</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2、缓存判断\"><a href=\"#2、缓存判断\" class=\"headerlink\" title=\"2、缓存判断\"></a>2、缓存判断</h2><ul>\n<li>浏览器是否存在资源缓存 是有有效<ul>\n<li>是 直接使用</li>\n<li>否 向服务器发起新的请求</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3、DNS-解析\"><a href=\"#3、DNS-解析\" class=\"headerlink\" title=\"3、DNS 解析\"></a>3、DNS 解析</h2><ul>\n<li>获取 URL 中域名的 IP 地址</li>\n<li>用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求</li>\n<li>检查 本地 DNS 服务器 是否存在该域名的 IP 地址的缓存<ul>\n<li>是 直接使用</li>\n<li>否 请求跟域名服务器 &#x3D;&gt; 获得 负责的顶级域名服务器地址 &#x3D;&gt; 请求负责的顶级域名服务器 &#x3D;&gt; 获得域名的 IP 地址</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4、获取-MAC-地址\"><a href=\"#4、获取-MAC-地址\" class=\"headerlink\" title=\"4、获取 MAC 地址\"></a>4、获取 MAC 地址</h2><h2 id=\"5、TCP-三次握手\"><a href=\"#5、TCP-三次握手\" class=\"headerlink\" title=\"5、TCP 三次握手\"></a>5、TCP 三次握手</h2><ul>\n<li>确认客户端与服务端的接受与发送能量</li>\n<li>客户端发送 SYN 连接请求报文段和一个随机序号</li>\n<li>服务端确认连接请求 并先客户端发送一个随机序号</li>\n<li>客户端进入连接建立的状态，并向服务器发送一个 ACK 确认报文段</li>\n<li>服务端接收确认后进入连接建立转态</li>\n<li>双方的连接建立完成</li>\n</ul>\n<h2 id=\"6、HTTPS-握手\"><a href=\"#6、HTTPS-握手\" class=\"headerlink\" title=\"6、HTTPS 握手\"></a>6、HTTPS 握手</h2><ul>\n<li>如果用的 HTTPS 协议 在通信前还存在 TLS 的第四次捂手过程</li>\n<li>客户端发送 协议本部好 随机数 加密方法</li>\n<li>服务端确认加密方法后发送 随机数 数字证书</li>\n<li>客户端确认证书后发送 随机数并加密 全部内容的 hash</li>\n<li>服务端解密随机数后发生 全部内容的 hash</li>\n<li>此时双方都有 3 个随机数</li>\n<li>加密生成秘钥</li>\n</ul>\n<h2 id=\"7、发送-HTTP-请求\"><a href=\"#7、发送-HTTP-请求\" class=\"headerlink\" title=\"7、发送 HTTP 请求\"></a>7、发送 HTTP 请求</h2><ul>\n<li>服务端处理请求，返回 HTTP 报文</li>\n</ul>\n<h2 id=\"8、页面渲染\"><a href=\"#8、页面渲染\" class=\"headerlink\" title=\"8、页面渲染\"></a>8、页面渲染</h2><ul>\n<li>解析 HTML 文件构建 DOM 树</li>\n<li>解析 CSS 文件构建 CSSOM 树</li>\n<li>如果遇到 script 标签判断是否同步加载还是异步加载</li>\n<li>DOM 树与 CSSOM 树合成渲染树进行布局</li>\n<li>布局完成后使用浏览器的 UI 接口对页面进行绘制</li>\n</ul>\n<h2 id=\"9、TCP-第四次握手\"><a href=\"#9、TCP-第四次握手\" class=\"headerlink\" title=\"9、TCP 第四次握手\"></a>9、TCP 第四次握手</h2><ul>\n<li>最后一步是 TCP 端口连接的第四次握手过程</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？\"><a href=\"#一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？\" class=\"headerlink\" title=\"一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？\"></a>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</h1><h2 id=\"1、解析-URL\"><a href=\"#1、解析-URL\" class=\"headerlink\" title=\"1、解析 URL\"></a>1、解析 URL</h2><ul>\n<li>对 URL 进行解析 分析传输协议金和资源路径</li>\n<li>协议或主机名是否合法<ul>\n<li>是 检查 是否存在非法字符 并对其进行转义</li>\n<li>否 内容传输给搜索引擎</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2、缓存判断\"><a href=\"#2、缓存判断\" class=\"headerlink\" title=\"2、缓存判断\"></a>2、缓存判断</h2><ul>\n<li>浏览器是否存在资源缓存 是有有效<ul>\n<li>是 直接使用</li>\n<li>否 向服务器发起新的请求</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3、DNS-解析\"><a href=\"#3、DNS-解析\" class=\"headerlink\" title=\"3、DNS 解析\"></a>3、DNS 解析</h2><ul>\n<li>获取 URL 中域名的 IP 地址</li>\n<li>用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求</li>\n<li>检查 本地 DNS 服务器 是否存在该域名的 IP 地址的缓存<ul>\n<li>是 直接使用</li>\n<li>否 请求跟域名服务器 &#x3D;&gt; 获得 负责的顶级域名服务器地址 &#x3D;&gt; 请求负责的顶级域名服务器 &#x3D;&gt; 获得域名的 IP 地址</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4、获取-MAC-地址\"><a href=\"#4、获取-MAC-地址\" class=\"headerlink\" title=\"4、获取 MAC 地址\"></a>4、获取 MAC 地址</h2><h2 id=\"5、TCP-三次握手\"><a href=\"#5、TCP-三次握手\" class=\"headerlink\" title=\"5、TCP 三次握手\"></a>5、TCP 三次握手</h2><ul>\n<li>确认客户端与服务端的接受与发送能量</li>\n<li>客户端发送 SYN 连接请求报文段和一个随机序号</li>\n<li>服务端确认连接请求 并先客户端发送一个随机序号</li>\n<li>客户端进入连接建立的状态，并向服务器发送一个 ACK 确认报文段</li>\n<li>服务端接收确认后进入连接建立转态</li>\n<li>双方的连接建立完成</li>\n</ul>\n<h2 id=\"6、HTTPS-握手\"><a href=\"#6、HTTPS-握手\" class=\"headerlink\" title=\"6、HTTPS 握手\"></a>6、HTTPS 握手</h2><ul>\n<li>如果用的 HTTPS 协议 在通信前还存在 TLS 的第四次捂手过程</li>\n<li>客户端发送 协议本部好 随机数 加密方法</li>\n<li>服务端确认加密方法后发送 随机数 数字证书</li>\n<li>客户端确认证书后发送 随机数并加密 全部内容的 hash</li>\n<li>服务端解密随机数后发生 全部内容的 hash</li>\n<li>此时双方都有 3 个随机数</li>\n<li>加密生成秘钥</li>\n</ul>\n<h2 id=\"7、发送-HTTP-请求\"><a href=\"#7、发送-HTTP-请求\" class=\"headerlink\" title=\"7、发送 HTTP 请求\"></a>7、发送 HTTP 请求</h2><ul>\n<li>服务端处理请求，返回 HTTP 报文</li>\n</ul>\n<h2 id=\"8、页面渲染\"><a href=\"#8、页面渲染\" class=\"headerlink\" title=\"8、页面渲染\"></a>8、页面渲染</h2><ul>\n<li>解析 HTML 文件构建 DOM 树</li>\n<li>解析 CSS 文件构建 CSSOM 树</li>\n<li>如果遇到 script 标签判断是否同步加载还是异步加载</li>\n<li>DOM 树与 CSSOM 树合成渲染树进行布局</li>\n<li>布局完成后使用浏览器的 UI 接口对页面进行绘制</li>\n</ul>\n<h2 id=\"9、TCP-第四次握手\"><a href=\"#9、TCP-第四次握手\" class=\"headerlink\" title=\"9、TCP 第四次握手\"></a>9、TCP 第四次握手</h2><ul>\n<li>最后一步是 TCP 端口连接的第四次握手过程</li>\n</ul>\n"},{"title":"高阶函数","date":"2023-04-08T10:28:45.000Z","hidden":true,"_content":"\n# 高阶函数\n\n> 在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数\n\n- 接受一个或多个函数作为输入\n  > 接受一个或多个函数作为参数传入 如：Array.prototype.map()和 Array,prototype.filter()\n- 输出一个函数。\n  > 输出一个函数 如：debuonce 和 throttle\n\n```javascript\nfunction debuonce(fn, delay) {\n  let timer = null;\n  return function () {\n    if (timer) {\n      return false;\n    }\n    timer = setTimeout(() => {\n      fn();\n    }, delay);\n  };\n}\nfunction throttle(fn, delay) {\n  let flag = true;\n  return function () {\n    if (!flag) {\n      return false;\n    }\n    flag = false;\n    setTimeout(() => {\n      fn();\n      flag = true;\n    }, delay);\n  };\n}\n```\n\n# 函数组合\n\n> 函数组合就是将两个或两个以上的函数组合生成一个新函数的过程：\n\n```javascript\nconst\n```\n\n# 柯里化函数\n\n```javascript\n\n```\n\n# 偏函数\n\n```javascript\n\n```\n\n# 惰性函数\n\n```javascript\n\n```\n\n# 缓存函数\n\n```javascript\n\n```\n","source":"_posts/高阶函数.md","raw":"---\ntitle: 高阶函数\ndate: 2023-04-08 18:28:45\ncategories: [高阶函数]\ntags: [函数组合, 柯里化函数, 偏函数, 惰性函数, 缓存函数]\nhidden: true\n---\n\n# 高阶函数\n\n> 在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数\n\n- 接受一个或多个函数作为输入\n  > 接受一个或多个函数作为参数传入 如：Array.prototype.map()和 Array,prototype.filter()\n- 输出一个函数。\n  > 输出一个函数 如：debuonce 和 throttle\n\n```javascript\nfunction debuonce(fn, delay) {\n  let timer = null;\n  return function () {\n    if (timer) {\n      return false;\n    }\n    timer = setTimeout(() => {\n      fn();\n    }, delay);\n  };\n}\nfunction throttle(fn, delay) {\n  let flag = true;\n  return function () {\n    if (!flag) {\n      return false;\n    }\n    flag = false;\n    setTimeout(() => {\n      fn();\n      flag = true;\n    }, delay);\n  };\n}\n```\n\n# 函数组合\n\n> 函数组合就是将两个或两个以上的函数组合生成一个新函数的过程：\n\n```javascript\nconst\n```\n\n# 柯里化函数\n\n```javascript\n\n```\n\n# 偏函数\n\n```javascript\n\n```\n\n# 惰性函数\n\n```javascript\n\n```\n\n# 缓存函数\n\n```javascript\n\n```\n","slug":"高阶函数","published":1,"updated":"2023-04-08T11:00:05.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg7v9ngk000qtfxc0lln4slq","content":"<h1 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h1><blockquote>\n<p>在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数</p>\n</blockquote>\n<ul>\n<li>接受一个或多个函数作为输入<blockquote>\n<p>接受一个或多个函数作为参数传入 如：Array.prototype.map()和 Array,prototype.filter()</p>\n</blockquote>\n</li>\n<li>输出一个函数。<blockquote>\n<p>输出一个函数 如：debuonce 和 throttle</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debuonce</span>(<span class=\"hljs-params\">fn, delay</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-literal\">null</span>;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (timer) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-title function_\">fn</span>();<br>    &#125;, delay);<br>  &#125;;<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-params\">fn, delay</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> flag = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (!flag) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    flag = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-title function_\">fn</span>();<br>      flag = <span class=\"hljs-literal\">true</span>;<br>    &#125;, delay);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"函数组合\"><a href=\"#函数组合\" class=\"headerlink\" title=\"函数组合\"></a>函数组合</h1><blockquote>\n<p>函数组合就是将两个或两个以上的函数组合生成一个新函数的过程：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"柯里化函数\"><a href=\"#柯里化函数\" class=\"headerlink\" title=\"柯里化函数\"></a>柯里化函数</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"偏函数\"><a href=\"#偏函数\" class=\"headerlink\" title=\"偏函数\"></a>偏函数</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"惰性函数\"><a href=\"#惰性函数\" class=\"headerlink\" title=\"惰性函数\"></a>惰性函数</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"缓存函数\"><a href=\"#缓存函数\" class=\"headerlink\" title=\"缓存函数\"></a>缓存函数</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h1><blockquote>\n<p>在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数</p>\n</blockquote>\n<ul>\n<li>接受一个或多个函数作为输入<blockquote>\n<p>接受一个或多个函数作为参数传入 如：Array.prototype.map()和 Array,prototype.filter()</p>\n</blockquote>\n</li>\n<li>输出一个函数。<blockquote>\n<p>输出一个函数 如：debuonce 和 throttle</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debuonce</span>(<span class=\"hljs-params\">fn, delay</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-literal\">null</span>;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (timer) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-title function_\">fn</span>();<br>    &#125;, delay);<br>  &#125;;<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-params\">fn, delay</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> flag = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (!flag) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    flag = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-title function_\">fn</span>();<br>      flag = <span class=\"hljs-literal\">true</span>;<br>    &#125;, delay);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"函数组合\"><a href=\"#函数组合\" class=\"headerlink\" title=\"函数组合\"></a>函数组合</h1><blockquote>\n<p>函数组合就是将两个或两个以上的函数组合生成一个新函数的过程：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"柯里化函数\"><a href=\"#柯里化函数\" class=\"headerlink\" title=\"柯里化函数\"></a>柯里化函数</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"偏函数\"><a href=\"#偏函数\" class=\"headerlink\" title=\"偏函数\"></a>偏函数</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"惰性函数\"><a href=\"#惰性函数\" class=\"headerlink\" title=\"惰性函数\"></a>惰性函数</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"缓存函数\"><a href=\"#缓存函数\" class=\"headerlink\" title=\"缓存函数\"></a>缓存函数</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><br></code></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clg7v9nfz0001tfxc2jkvc4ne","category_id":"clg7v9ng50004tfxcbva35e6p","_id":"clg7v9ngc000btfxc4px86wqq"},{"post_id":"clg7v9ng30003tfxc0j1q5jfy","category_id":"clg7v9ng50004tfxcbva35e6p","_id":"clg7v9nge000dtfxcbc0g2k4j"},{"post_id":"clg7v9ng80006tfxch6wg0epp","category_id":"clg7v9ng50004tfxcbva35e6p","_id":"clg7v9ngf000gtfxchzvw9s3g"},{"post_id":"clg7v9ngh000jtfxcay9g9pr5","category_id":"clg7v9ng50004tfxcbva35e6p","_id":"clg7v9ngk000otfxc1vj8c77g"},{"post_id":"clg7v9ngj000mtfxch119b8nu","category_id":"clg7v9ng50004tfxcbva35e6p","_id":"clg7v9ngl000stfxcgn1kcey1"},{"post_id":"clg7v9ngj000ntfxc0yb34slx","category_id":"clg7v9ng50004tfxcbva35e6p","_id":"clg7v9ngm000utfxc7tx5eab0"},{"post_id":"clg7v9ngk000qtfxc0lln4slq","category_id":"clg7v9ngm000ttfxc9i8e3yd8","_id":"clg7v9ngn000ytfxccaygeauv"}],"PostTag":[{"post_id":"clg7v9nfz0001tfxc2jkvc4ne","tag_id":"clg7v9ng70005tfxc60ehhvyy","_id":"clg7v9ngc0009tfxc6u4venkl"},{"post_id":"clg7v9ng30003tfxc0j1q5jfy","tag_id":"clg7v9ng70005tfxc60ehhvyy","_id":"clg7v9nge000ftfxc1ldi411a"},{"post_id":"clg7v9ng30003tfxc0j1q5jfy","tag_id":"clg7v9ngd000ctfxcd5lfahjm","_id":"clg7v9ngf000htfxc030b8fe1"},{"post_id":"clg7v9ng80006tfxch6wg0epp","tag_id":"clg7v9ng70005tfxc60ehhvyy","_id":"clg7v9ngf000itfxc354hdrp3"},{"post_id":"clg7v9ngh000jtfxcay9g9pr5","tag_id":"clg7v9ng70005tfxc60ehhvyy","_id":"clg7v9ngj000ltfxcaskj7jzs"},{"post_id":"clg7v9ngj000mtfxch119b8nu","tag_id":"clg7v9ng70005tfxc60ehhvyy","_id":"clg7v9ngk000ptfxcg70h5kqg"},{"post_id":"clg7v9ngj000ntfxc0yb34slx","tag_id":"clg7v9ngl000rtfxchjbh78ic","_id":"clg7v9ngn000wtfxcb685aj4l"},{"post_id":"clg7v9ngk000qtfxc0lln4slq","tag_id":"clg7v9ngm000vtfxc3a963121","_id":"clg7v9ngo0012tfxc6s9s84p6"},{"post_id":"clg7v9ngk000qtfxc0lln4slq","tag_id":"clg7v9ngn000xtfxc6m4v1h0x","_id":"clg7v9ngp0013tfxcgp5u0cqv"},{"post_id":"clg7v9ngk000qtfxc0lln4slq","tag_id":"clg7v9ngn000ztfxc46199age","_id":"clg7v9ngp0014tfxcdb36fv2s"},{"post_id":"clg7v9ngk000qtfxc0lln4slq","tag_id":"clg7v9ngo0010tfxc7hyf09fz","_id":"clg7v9ngp0015tfxc0d4q8ca5"},{"post_id":"clg7v9ngk000qtfxc0lln4slq","tag_id":"clg7v9ngo0011tfxc5vqddq9n","_id":"clg7v9ngp0016tfxcgu8s6kt7"}],"Tag":[{"name":"Vue","_id":"clg7v9ng70005tfxc60ehhvyy"},{"name":"Diff","_id":"clg7v9ngd000ctfxcd5lfahjm"},{"name":"HTTP","_id":"clg7v9ngl000rtfxchjbh78ic"},{"name":"函数组合","_id":"clg7v9ngm000vtfxc3a963121"},{"name":"柯里化函数","_id":"clg7v9ngn000xtfxc6m4v1h0x"},{"name":"偏函数","_id":"clg7v9ngn000ztfxc46199age"},{"name":"惰性函数","_id":"clg7v9ngo0010tfxc7hyf09fz"},{"name":"缓存函数","_id":"clg7v9ngo0011tfxc5vqddq9n"}]}}